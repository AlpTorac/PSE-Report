@startuml Class_Diagram
'Style Settings
skinparam {
    Linetype ortho
    BackgroundColor #bababa
    Shadowing false
    Nodesep 60
    Ranksep 50
}
skinparam Arrow {
    Color #2e2e2e
    Thickness 1.5
}
skinparam CircledCharacter {
    Radius 8
    FontSize 10
}
skinparam class {
    BackgroundColor #d1d1d1
    BorderColor #2e2e2e
    BorderThickness 1.5
    HeaderBackgroundColor #a6a6a6
}
skinparam package {
    BackgroundColor #bcbfd6
    BorderThickness 1.8
}
skinparam Note {
    BackgroundColor #297547
    BorderColor #171a17
    FontColor #e8e8e8
}
'Class Diagram
'Class Definitions
    'Basic UI Components, extend/use Swing components
    package Components {
        'Swing
            together {
                class Container extends Component
                class JComponent extends Container {
                    .
                    .
                    --
                    .
                    .
                }
                class JFrame 
                class JFileChooser
                class JPanel extends JComponent
                class JButton extends JComponent
                class JLabel extends JComponent
                class JTextField extends JComponent
                class JTextPane extends JComponent
                class JComboBox extends JComponent
                class JTree extends JComponent
                class JScrollPane extends JComponent
                class JMenuBar extends JComponent
                class JCheckBox extends JComponent
            }
            'Listeners
                together {
                    interface EventListener
                    interface ComponentListener extends EventListener {
                        +componentHidden(ComponentEvent e)
                        +componentMoved(ComponentEvent e)
                        +componentResized(ComponentEvent e)
                        +componentShown(ComponentEvent e)
                    }
                    interface ActionListener extends EventListener {
                        +actionPerformed(ActionEvent e)
                    }
                    interface KeyListener extends EventListener {
                        +keyPressed(KeyEvent e)
                        +keyReleased(KeyEvent e)
                        +keyTyped(KeyEvent e)
                    }
                }
        'Custom
            class Tree extends JTree
            class Button extends JButton
            class DropdownSelector extends JComboBox
            class InputBox extends JTextField
            class Checkbox extends JCheckBox
            class Label extends JLabel
            class ScrollPane extends JScrollPane
            class MenuBar extends JMenuBar
            class TextPane extends JTextPane

            'Frames/Panels
            together {
                enum ResizeMode {
                    ABSOLUTE_TOP_LEFT
                    ABSOLUTE_BOTTOM_RIGHT
                    RELATIVE
                }
                class Resizer {
                    +Resizer(ResizeMode t, ResizeModer r, ResizeMode b, ResizeMode l)
                    +resize(Component, int width, int height, int newWidth, int newHeight)
                }
                interface AutoResizing extends ComponentListener {
                    +setResizer(Component, Resizer)
                }

                class Panel extends JPanel implements AutoResizing {
                    -Map<Component, ComponentResizer>
                    +setResizer(Component, Resizer)
                }
                class Window implements AutoResizing {
                    -Map<Component, ComponentResizer>
                    +setResizer(Component, Resizer)
                }
                ResizeMode <-- Resizer
            }
    }
    
    'UI Composites
    package Composites {
        enum InfoBarID {
            VERSION
            SELECTED
            LASTACTION
        }
        class InfoBar extends Panel {
            -Map<InfoBarID,TextBox>
            +setText(InfoBarID, String)
        }
        InfoBarID <-- InfoBar : <<uses>>

        class MainWindow extends Window {
            -MenuBar mainMenu

            +MainWindow()
            + {static} void main(String[] args)
        }

        class SubWindowArea extends Panel{
            +addSubWindow(SubWindow)
            +removeSubWindow(SubWindow)
        }
        class SubWindow extends Panel {
            -MenuBar
            +SubWindow(Element)
            +setElement(Element)
        }
        abstract class ElementManipulator extends Panel {
            +setElement(Element)
        }
        class TextEditor implements ElementManipulator {
            -TextPane
            +TextEditor(Element)
        }
        class Visualizer implements ElementManipulator {
            -TextArea Info
            -MenuBar diagramOptions
            -MenuBar statisticsOptions
            +Visualizer(Element)
        }
        SubWindow *-- "1..[num subtypes]" ElementManipulator
        SubWindowArea *-- "0..3" SubWindow

        class Outliner extends Panel {
            -MenuBar
            -Tree
            -DAO
            +Outliner(DAO data)
        }

        class MergeDialog extends Window {
            Label prompt
            Label left
            Label right
            InputBox left
            InputBox right
            Button renameLeft
            Button renameRight
            Button keepLeft
            Button keepRight
            +MergeDialog()
            +open(Element eLeft, Element eRight)
        }
        MergeDialog --* MainWindow
    }
'Diagrams
    package Diagrams {
        abstract Class Diagram {
            '#Element element
            +SomeGraphData export() // or file
            +void refresh()
            +void update()
        }
        abstract class 2DDiagram extends Diagram {
            #DiagramAxis xAxis
            #DiagramAxis yAxis
        }
        abstract class 3DDiagram extends Diagram {
            #DiagramAxis xAxis
            #DiagramAxis yAxis
            #DiagramAxis zAxis
        }
        class Histogram extends 2DDiagram {
            -DiagramBar[] bars
        }
        class BarChart extends 2DDiagram {
            -DiagramBar[] bars
        }
        class HeatMap extends 2DDiagram {
            -ColorScale colorScale
        }
        class FunctionGraph extends 2DDiagram {
            -DiagramPoint[] points
        }
        class 3DHistogram extends 3DDiagram

        interface Hoverable {
            +default boolean isBeingHovered()
        }
        abstract class DiagramComponent implements Hoverable {
            #Color color
            #Number xPos
            #Number yPos
        }
        abstract class DiagramBar extends DiagramComponent {
            #Number size
        }
        abstract class DiagramAxis extends DiagramComponent {
            #Number min
            #Number max
            #int steps
            #boolean showValues
        }
        abstract class DiagramLabel extends DiagramComponent {
            #String caption
        }
        abstract class DiagramPoint extends DiagramComponent {

        }
        class 2DPoint extends DiagramPoint
        class 3DPoint extends DiagramPoint
        class 2DBar extends DiagramBar
        class 3DBar extends DiagramBar
        class 2DAxis extends DiagramAxis
        class 3DAxis extends DiagramAxis
        class HeatMapLabel extends DiagramLabel {

        }
        'Shows value that is being
        'hovered over
        class HoverLabel {
            -String caption
            -Color color
            -Number xPos // mouse pointer
            -Number yPos // mouse pointer
        }
    }

'Class Relations
    'Ui
    AutoResizing --> Resizer
    Visualizer -> Diagram

    MainWindow *-- "1"Outliner
    MainWindow *-- "1"SubWindowArea
    MainWindow *-- "1"InfoBar
    'UIElement Implementers
    HeatMap "1" *-- "*" HeatMapLabel
    Diagram *-- "*" DiagramComponent
    Hoverable "1" *-- "1" HoverLabel : > creates when hovered
'Package Relations
@enduml