@startuml Class_Diagram
'Style Settings
skinparam {
    Linetype ortho
    BackgroundColor #bababa
    Shadowing false
    Nodesep 60
    Ranksep 50
}
skinparam Arrow {
    Color #2e2e2e
    Thickness 1.5
}
skinparam CircledCharacter {
    Radius 8
    FontSize 10
}
skinparam class {
    BackgroundColor #d1d1d1
    BorderColor #2e2e2e
    BorderThickness 1.5
    HeaderBackgroundColor #a6a6a6
}
skinparam package {
    BackgroundColor #bcbfd6
    BorderThickness 1.8
}
skinparam Note {
    BackgroundColor #297547
    BorderColor #171a17
    FontColor #e8e8e8
}
'Class Diagram
'Class Definitions
    'Basic UI Components, extend/use Swing components
    package Components {
        'Swing
            together {
                class Container extends Component
                class JComponent extends Container {
                    .
                    .
                    --
                    .
                    .
                }
                class JFrame 
                class JFileChooser
                class JPanel extends JComponent
                class JButton extends JComponent
                class JLabel extends JComponent
                class JTextField extends JComponent
                class JTextPane extends JComponent
                class JComboBox extends JComponent
                class JTree extends JComponent
                class JScrollPane extends JComponent
                class JMenuBar extends JComponent
                class JCheckBox extends JComponent
            }
            'Listeners
                together {
                    interface EventListener
                    interface ComponentListener extends EventListener {
                        +componentHidden(ComponentEvent e)
                        +componentMoved(ComponentEvent e)
                        +componentResized(ComponentEvent e)
                        +componentShown(ComponentEvent e)
                    }
                    interface ActionListener extends EventListener {
                        +actionPerformed(ActionEvent e)
                    }
                    interface KeyListener extends EventListener {
                        +keyPressed(KeyEvent e)
                        +keyReleased(KeyEvent e)
                        +keyTyped(KeyEvent e)
                    }
                }
        'Custom
            class Tree extends JTree
            class Button extends JButton
            class DropdownSelector extends JComboBox
            class InputBox extends JTextField
            class Checkbox extends JCheckBox
            class Label extends JLabel
            class ScrollPane extends JScrollPane
            class MenuBar extends JMenuBar
            class TextPane extends JTextPane

            'Frames/Panels
            together {
                enum ResizeMode {
                    ABSOLUTE_TOP_LEFT
                    ABSOLUTE_BOTTOM_RIGHT
                    RELATIVE
                }
                class Resizer {
                    +Resizer(ResizeMode t, ResizeModer r, ResizeMode b, ResizeMode l)
                    +resize(Component, int width, int height, int newWidth, int newHeight)
                }
                interface AutoResizing extends ComponentListener {
                    +setResizer(Component, Resizer)
                }

                class Panel extends JPanel implements AutoResizing {
                    -Map<Component, ComponentResizer>
                    +setResizer(Component, Resizer)
                }
                class Window implements AutoResizing {
                    -Map<Component, ComponentResizer>
                    +setResizer(Component, Resizer)
                }
                ResizeMode <-- Resizer
            }
    }
    
    'UI Composites
    package Composites {
        enum InfoBarID {
            VERSION
            SELECTED
            LASTACTION
        }
        class InfoBar extends Panel {
            -Map<InfoBarID,TextBox>
            +setText(InfoBarID, String)
        }
        InfoBarID <-- InfoBar : <<uses>>

        class MainWindow extends Window {
            -MenuBar mainMenu

            +MainWindow()
            + {static} void main(String[] args)
        }

        class SubWindowArea extends Panel{
            +addSubWindow(SubWindow)
            +removeSubWindow(SubWindow)
        }
        class SubWindow extends Panel {
            -MenuBar
            +SubWindow(Element)
            +setElement(Element)
        }
        abstract class ElementManipulator extends Panel {
            +setElement(Element)
        }
        class TextEditor implements ElementManipulator {
            -TextPane
            +TextEditor(Element)
        }
        class Visualizer implements ElementManipulator {
            -TextArea Info
            -MenuBar diagramOptions
            -MenuBar statisticsOptions
            +Visualizer(Element)
        }
        SubWindow *-- "1..[num subtypes]" ElementManipulator
        SubWindowArea *-- "0..3" SubWindow

        class Outliner extends Panel {
            -MenuBar
            -Tree
            -DAO
            +Outliner(DAO data)
        }

        class MergeDialog extends Window {
            Label prompt
            Label left
            Label right
            InputBox left
            InputBox right
            Button renameLeft
            Button renameRight
            Button keepLeft
            Button keepRight
            +MergeDialog()
            +open(Element eLeft, Element eRight)
        }
        MergeDialog --* MainWindow
    }
'Diagrams
package Diagrams {
    interface ISettingsUser {
        +void changeSettings(Settings s)
    }
    interface IDiagram {
        +Collection<?> cloneData()
        +void refresh()
        +void update()
    }
    interface IDiagramComparer {
        +IDiagram getDiagram(int index)
        +void setDiagram(int index, IDiagram diagram)
        +boolean addDiagram(IDiagram diagram)
        +boolean removeDiagram(IDiagram diagram)
        +IDiagram compare(int[] indices)
        +IDiagram compare(IDiagram[] diagrams)
    }
    package Diagram.Comparer {
        class DiagramComparer implements IDiagramComparer {
            -Collection<? extends IDiagram> diagrams
            -IDiagramCompareStrategy compareStrategy
            +DiagramComparer()
            #void setCompareStrategy()
        }
        interface IDiagramCompareStrategy {
            +IDiagram compare()
        }
        class FunctionGraphCompareStrategy implements IDiagramCompareStrategy {
            -FunctionGraph[] functionGraphs
            +FunctionGraphCompareStrategy(FunctionGraph[] functionGraphs)
            +FunctionGraph compare()
        }
        class HistogramCompareStrategy implements IDiagramCompareStrategy {
            -Histogram histogram1
            -Histogram histogram2
            +HistogramCompareStrategy(Histogram histogram1, Histogram histogram2)
            +Histogram compare()
        }
        class HeatMapCompareStrategy implements IDiagramCompareStrategy {
            -DiagramColorScale compareColors
            -HeatMap heatMap1
            -HeatMap heatMap2
            +HeatMapCompareStrategy(HeatMap heatMap1, HeatMap heatMap2)
            +HeatMapCompareStrategy(HeatMap heatMap1, HeatMap heatMap2, DiagramColorScale compareColors)
            +HeatMap compare()
        }
        note bottom of HeatMapCompareStrategy
            Use a 2ColorScale with the color-value-pairs
            (red, minValue) and (green, maxValue) to make
            a heat map from the differences between the
            heat maps.
        end note
        class BarChartCompareStrategy implements IDiagramCompareStrategy {
            -BarChart barChart1
            -BarChart barChart2
            +BarChartCompareStrategy(BarChart barChart1, BarChart barChart2)
            +BarChart compare()
        }
    }
    package Diagram.Components {
        interface Hoverable {
            +default boolean isBeingHovered()
            +default void hoverAction()
            +default void refreshHoverLabelPosition()
            +default void showHoverLabel()
            +default void hideHoverLabel()
        }
        note right of Hoverable::hoverAction
            show label as default
            override if there is more
        end note
        abstract class DiagramComponent {
            #Color color
            #Number xPos
            #Number yPos
            #DiagramComponent(Number xPos, Number yPos, Color color)
            +{abstract} clone()
            +void setColor(Color color)
            +void setXPos(Number xPos)
            +void setYPos(Number yPos)
            +Number getXPos()
            +Number getYPos()
            +Number getColor()
            +void show()
            +void hide()
        }
        note left of DiagramComponent {
            xPos and yPos are the coordinates of
            the middle of the component
        }
        abstract class DiagramValueDisplayComponent extends DiagramComponent implements Hoverable {
            #Number value
            #DiagramAxis[] axes
            #DiagramValueDisplayComponent(Number xPos, Number yPos, Color color, Number value, DiagramAxis[] axes)
            +Number valueToCoordinate(int axisIndex)
            +void setValue()
            +Number getValue()
            +{abstract} void refreshValueRelevantAttributes()
        }
        abstract class DiagramBar extends DiagramValueDisplayComponent {
            #Number width
            #Number height
            #DiagramBar(Number xPos, Number yPos, Color color, Number value, Number width, DiagramAxis[] axes)
            #void refreshHeight()
            #void calculateHeight()
            #void refreshWidth()
            #void calculateWidth()
            #void setHeight()
            #void setWidth()
            +Number getHeight()
            +Number getWidth()
        }
        note left of DiagramBar::refreshHeight
            setValue calls refreshHeight(), which
            calibrates the height anew.
        end note
        abstract class DiagramAxis extends DiagramComponent {
            #Number xPos = axisLine.getXPos
            #Number yPos = axisLine.getYPos
            #Number min
            #Number max
            #int steps
            #boolean showValues
            #DiagramLine axisLine
            #DiagramAxis(DiagramLine axisLine, Number min, Number max, int steps)
            +void setMin(Number min)
            +Number getMin()
            +void setMax(Number max)
            +Number getMax()
            +void setSteps(int steps)
            +int getSteps()
            +void showValues()
            +void hideValues()
            #void paintComponent(Graphics g)
            +void paintAxis()
            +Number valueToCoordinate(Number value)
            +Number CoordinateToValue(Number coordinate)
            +void setLineByLength(Number length)
            +void setLineByPos(Number minValXPos, Number minValYPos, Number maxValXPos, Number maxValYPos)
            +void setLineColor(Color color)
            +void setLineThickness(Number thickness)
            +Number getLineLength()
        }
        note right of DiagramAxis::paintComponent
            Override this method from JComponent,
            use paintAxis() method instead.

            paintAxis() initializes the parameter of
            paintComponent and calls paintComponent.
        end note
        note right of DiagramAxis::CoordinateToValue
            Throws an exception, if the coordinate
            is out of the range of the axis' line
            (determined by x1 and x2 or y1 and y2 of
            axisLine)
        end note
        abstract class DiagramLabel extends DiagramComponent {
            #String caption
            #DiagramLabel(Number xPos, Number yPos, Color color, String caption)
            +void setCaption(String caption)
            +String getCaption()
        }
        abstract class DiagramLine extends DiagramComponent {
            #Number x1
            #Number y1
            #Number x2
            #Number y2
            #Number thickness
            #DiagramLine(Number xPos, Number yPos, Number length, Color color, Number thickess)
            #DiagramLine(Number x1, Number y1, Number x2, Number y2, Color color, Number thickess)
            #Number calculateLength()
            +void setPos(Number x1, Number y1, Number x2, Number y2)
            +void setThickness(Number thickness)
            +void setX1()
            +void setY1()
            +void setX2()
            +void setY2()
            +Number getLength()
            +Number getX1()
            +Number getY1()
            +Number getX2()
            +Number getY2()
            +Number getThickness()
        }
        note top of DiagramLine
            Make a horizontal line, if the
            length is given.

            Calculate length with Pythagoras'
            formula
        end note
        class SolidLine extends DiagramLine {
            #SolidLine(Number xPos, Number yPos, Number length, Color color)
            #SolidLine(Number x1, Number y1, Number x2, Number y2, Color color)
        }
        abstract class DiagramValueLabel extends DiagramValueDisplayComponent {
            #String caption
            #DiagramValueLabel(Number xPos, Number yPos, Color color, Number value, DiagramAxis[] axes)
            #void refreshCaption()
            #void setCaption(String caption)
            +String getCaption()
        }
        abstract class DiagramPoint extends DiagramValueDisplayComponent {
            #Number size
            #DiagramPoint(Number xPos, Number yPos, Color color, Number value, Number size, DiagramAxis[] axes)
            +void setSize(Number size)
            +Number getSize()
        }
        abstract class DiagramColorScale extends DiagramComponent {
            #Color color = borderColor
            #DiagramColorScale(Number xPos, Number yPos, Color borderColor, Number[] values, Color[] valueColors)
            +Color valueToColor(Number value)
            +Number[] getValues()
            +Color[] getColors()
            +final Object[] matchingsAsArray()
        }
        note right of DiagramColorScale::matchingsAsArray
            return new Object[]
            {getValues(), getColors()}
        end note
        class 2ColorScale extends DiagramColorScale {
            #Color color = borderColor
            -Color minValueColor
            -Color maxValueColor
            +Number minValue
            +Number maxValue
            #2ColorScale(Number xPos, Number yPos, Color borderColor, Number minVal, Number maxVal, Color minValColor, Color maxValColor)
            +Color getMinValueColor()
            +Color getMaxValueColor()
            +void setMinValueColor(Color minValueColor)
            +void setMaxValueColor(Color maxValueColor)
            +Number getMinValue()
            +Number getMaxValue()
            +void setMinValue(Number minValue)
            +void setMaxValue(Number maxValue)
        }
        class ValueDisplayPoint extends DiagramPoint {
            #ValueDisplayPoint(Number xPos, Number yPos, Color color, Number value, Number size, DiagramAxis[] axes)
        }
        class HistogramBar extends DiagramBar {
            #HistogramBar(Number xPos, Number yPos, Color color, Number value, DiagramAxis[] axes)
        }
        class BarChartBar extends DiagramBar {
            #BarChartBar(Number xPos, Number yPos, Color color, Number value, Number width, DiagramAxis[] axes)
        }
        class SolidAxis extends DiagramAxis {
            #SolidAxis(SolidLine axisLine, Number min, Number max, int steps)
        }
        class HeatMapLabel extends DiagramValueLabel {
            #HeatMapLabel(Number xPos, Number yPos, DiagramColorScale, Number value, DiagramAxis[] axes)
        }
        class DescriptionLabel extends DiagramLabel {
            #DescriptionLabel(Number xPos, Number yPos, Color color, String caption)
        }
        'Shows value that is being
        'hovered over
        class HoverLabel {
            -String caption
            -Theme theme
            -Number xPos
            -Number yPos
            -HoverLabel hoverLabel
            -HoverLabel()
            +HoverLabel getHoverLabel()
            +void show()
            +void hide()
        }
        class DiagramComponentFactory implements ISettingsUser {
            -DiagramComponentFactory instance = new DiagramComponentFactory
            -DiagramComponentFactory()
            +DiagramComponentFactory getDiagramComponentFactory() // return this
            +DiagramPoint createPoint()
            +DiagramValueLabel createValueLabel()
            +DiagramBar createBar()
            +DiagramLabel createLabel()
            +DiagramAxis createAxis()
            +DiagramColorScale createColorScale()
            +DiagramLine createLine()
        }
    }
    package Diagram.Data {
        class DiagramData {
            -Collection<?> data;
            -DiagramDataFormatter ddf;
            +DiagramData(Collection<?> data)
            +<T extends Collection<?>> T getData();
            +void update()
            +void setFormat(DiagramDataFormatter ddf)
        }
        note right of DiagramData::getData
        Run ddf on data and return result.
        If ddf = null, return a deep copy.
        end note
        abstract class DiagramDataFormatter {
            +DiagramDataFormatter()
            +<T extends Collection<?>> format(T data)
        }
        class ArrayListDataFormatter extends DiagramDataFormatter {
            +<T extends Collection<?>> ArrayList<?> format(T data)
        }
        class ArrayDataFormatter extends DiagramDataFormatter {
            +<E, T extends Collection<E>> E[] format(T data)
        }
    }
    package Diagram.Type {
        interface DiagramComponentAccessPoint {
            +DiagramComponent[] getNonValueDisplayDiagramComponentPrototypes()
            +DiagramValueDisplayComponent[] getDiagramValueDisplayComponentPrototypes()
        }
        note top of DiagramComponentAccessPoint
            Provide a deep copy of each DiagramComponent
            appropriate for the method name
            (only one each type)
        end note
        abstract class Diagram implements IDiagram, DiagramComponentAccessPoint {
            -DiagramData data
            -DiagramAxis[] axes
            -DiagramValueDisplayComponent[] valueDisplayComponents
            -DiagramComponent[] nonValueDisplayComponents
            +Diagram(DiagramData data)
            +Diagram(axes, valueDisplayComponents, nonValueDisplayComponents)
            'Collection<?> cloneData()
            'void refresh()
            'void update()
        }
        class Histogram extends Diagram {
            +Histogram(DiagramData data)
            +Histogram(axes, valueDisplayComponents, nonValueDisplayComponents)
        }
        class BarChart extends Diagram {
            +BarChart(DiagramData data)
            +BarChart(axes, valueDisplayComponents, nonValueDisplayComponents)
        }
        class HeatMap extends Diagram {
            +HeatMap(DiagramData data)
            +HeatMap(axes, valueDisplayComponents, nonValueDisplayComponents)
        }
        class FunctionGraph extends Diagram {
            +FunctionGraph(DiagramData data)
            +FunctionGraph(axes, valueDisplayComponents, nonValueDisplayComponents)
        }
        note as Diagram1
            Diagram(DiagramData data) constructor call
            accesses DiagramDirector, sets the
            DiagramBuilder and the DiagramData attributes
            in DiagramDirector and builds the diagram

            Diagram(axes, valueDisplayComponents,
            nonValueDisplayComponents) is used by the
            builders after the components are built.
            They are also used by the Comparers to
            combine multiple diagrams into one for
            comparing.
        end note
        Histogram -- Diagram1
        BarChart -- Diagram1
        HeatMap -- Diagram1
        FunctionGraph -- Diagram1
    }
    package Diagram.Indicators {
        abstract class DiagramViewHelper implements IDiagram, DiagramComponentAccessPoint {
            -int layer
            -IDiagram inner
            -DiagramViewHelper outer
            -List<ViewHelperComponent> helperComponents
            +DiagramViewHelper(IDiagram inner, int layer)
            #{abstract} void generateHelperComponents()
            +int getLayerNumber()
            +IDiagram getInner()
            +DiagramViewHelper getOuter()
            +boolean hasOuter()
            +boolean isInnerDiagramViewHelper()
            +void remove()
            +void show()
            +void hide()
            +boolean addViewHelperComponent(ViewHelperComponent vhc)
            +boolean removeViewHelperComponent(ViewHelperComponent vhc)
            +boolean clearViewHelperComponents()
            '+DiagramComponent[] getNonValueDisplayDiagramComponentPrototypes()
            '+DiagramValueDisplayComponent[] getDiagramValueDisplayComponentPrototypes()
            '+Collection<?> cloneData()
            '+void refresh()
            '+void update()
        }
        abstract class HelperLineDisplayer extends DiagramViewHelper {
            +HelperLineDisplayer(IDiagram inner)
            #void generateHelperComponents()
        }
        note right of DiagramViewHelper::layer
            Indicates how much in the front the decorator is.

            For example with JLayeredPane
        end note
        note right of DiagramViewHelper
            For DiagramComponentAccessPoint methods:
            Keep looking for a Diagram by recursively
            going through the Decorators.
        end note
        note right of DiagramViewHelper
            DiagramViewHelper(IDiagram inner) sets inner
            and ((DiagramViewHelper) this.inner).outer = this,
            if (isInnerDiagramViewHelper()) 
        end note
        note left of DiagramViewHelper::outer
            Must always be a DiagramViewHelper or null
        end note
        note left of DiagramViewHelper::isInnerDiagramViewHelper
            {return this.inner instanceof DiagramViewHelper;}

            Inner can never be null, because the most inner
            object is always a Diagram.
        end note
        note left of DiagramViewHelper::remove
            {this.outer.inner = this.inner;
            if (isInnerDiagramViewHelper()) {
                this.inner.outer = this.outer
            }}
        end note
        class StatisticsLineDisplayer extends HelperLineDisplayer {
            -DiagramAxis axis
            -Color color
            -Number thickness
            -Number value
            +StatisticsLineDisplayer(IDiagram inner, DiagramAxis axis, Color color, Number thickness, Number value)
            -void createStatisticLine()
        }
        note bottom of StatisticsLineDisplayer
            Displays lines for statistics checked
            in the checkbox part
        end note
        abstract class HelperComponentDisplayer extends DiagramViewHelper {
            +HelperComponentDisplayer(IDiagram inner)
        }
        class ValueFixColorDisplayer extends HelperComponentDisplayer {
            -TreeMap<Number, Color> mapping
            +ValueFixColorDisplayer(IDiagram inner, TreeMap<Number, Color> mapping)
            #void generateHelperComponents()
        }
        class ValueScaleColorDisplayer extends HelperComponentDisplayer {
            -DiagramColorScale colorScale
            +ValueScaleColorDisplayer(IDiagram inner, DiagramColorScale colorScale)
            #void generateHelperComponents()
        }
        note left of HelperComponentDisplayer
            Overshadows DiagramComponents with the ViewHelperComponents
            that are wanted to be seen by the user.

            Layer is set within the constructor.
        end note
        note as ValueColorDisplayers
            Call getDiagramValueDisplayComponentPrototypes(),
            adjust the returned elements, color them accordingly,
            wrap them with ViewHelperComponent object
            add them to helperComponents.
        end note
        ValueColorDisplayers -- ValueScaleColorDisplayer
        ValueColorDisplayers -- ValueFixColorDisplayer
        class CoordinateIndicatorLineDisplayer extends HelperLineDisplayer {
            -DiagramAxis[] axes
            -Color color
            -Number thickness
            +CoordinateIndicatorLineDisplayer(IDiagram inner, DiagramAxis[] axes, Color color, Number thickness)
            -void createCoordinateIndicatorLines()
        }
        class ViewHelperComponent {
            +ViewHelperComponent(DiagramComponent dc)
            +void show()
            +void hide()
        }
        note bottom of ViewHelperComponent
            Wraps DiagramComponents that the
            decorators create and use
        end note
        note as ViewHelperComponentGeneration
            Call getDiagramValueDisplayComponentPrototypes() or
            getNonValueDisplayDiagramComponentPrototypes(),
            adjust the returned required elements, color them accordingly,
            wrap them with ViewHelperComponent object
            add them to helperComponents.
        end note
        DiagramViewHelper *--> ViewHelperComponent
        class CoordinateIndicatorLine  extends DiagramLine {
            #CoordinateIndicatorLine(Number xPos, Number yPos, Number length, Color color, Number thickness)
            #CoordinateIndicatorLine(Number x1, Number y1, Number x2, Number y2, Color color, Number thickness)
        }
        class StatisticLine  extends DiagramLine {
            #StatisticLine(Number xPos, Number yPos, Number length, Color color, Number thickness)
            #StatisticLine(Number x1, Number y1, Number x2, Number y2, Color color, Number thickness)
        }
        StatisticsLineDisplayer --> StatisticLine : > <<creates>>
        CoordinateIndicatorLineDisplayer --> CoordinateIndicatorLine : > <<creates>>
    }
    note top of Diagram.Indicators
        Things that will be shown on diagrams
        that are not actually a part of them go here
    end note
    note as N1
        Decorator pattern:
        
        -IDiagram as Component
        -Diagram subclasses as ConcreteComponents
        -DiagramViewHelper as BaseDecorator
        -Its subclasses as ConcreteDecorators 
    end note
    note as N2
        Strategy pattern:

        -IDiagramCompareStrategy as abstract strategy
        -Its subclasses as concrete strategies
    end note
    note as N3
        Builder Pattern:

        -DiagramDirector as singleton director
        -Its subclasses as builders
    end note
    class DiagramDirector implements ISettingsUser {
        -DiagramBuilder builder
        -DiagramData data
        -DiagramDirector instance = new DiagramDirector
        -DiagramDirector()
        +DiagramDirector getDiagramDirector()
        +void changeBuilder(Builder b)
        +void setDiagramData(DiagramData data)
        +IDiagram build()
    }
    abstract class DiagramBuilder {
        -Settings settings = SettingsProvider.getSettings
        -DiagramData data
        #DiagramAxis buildAxes()
        #DiagramValueDisplayComponent[] buildValueDisplayComponents()
        #DiagramComponent[] buildDiagramSpecificComponent()
        +DiagramBuilder(DiagramData data)
        +IDiagram buildDiagram()
    }
    class BarChartBuilder extends DiagramBuilder {
        +BarChartBuilder(DiagramData data)
    }
    class HistogramBuilder extends DiagramBuilder {
        +HistogramBuilder(DiagramData data)
    }
    class FunctionGraphBuilder extends DiagramBuilder {
        +FunctionGraphBuilder(DiagramData data)
    }
    class HeatMapBuilder extends DiagramBuilder {
        +HeatMapBuilder(DiagramData data)
    }
    class SettingsProvider {
        -List<ISettingsUser> ISettingsUsers
        -SettingsProvider instance = new SettingsProvider
        -Settings s
        -SettingsProvider()
        +SettingsProvider getInstance()
        +void changeSettings(Settings s)
        +Settings getSettings()
        +void addSettingsUser(ISettingsUser settingsUser)
        +void removeSettingsUser(ISettingsUser settingsUser)
    }
    SettingsProvider -- DiagramDirector
    SettingsProvider -- DiagramComponentFactory
}

'Class Relations
    'Ui
        AutoResizing --> Resizer
        Visualizer -> IDiagram

        MainWindow *-- "1"Outliner
        MainWindow *-- "1"SubWindowArea
        MainWindow *-- "1"InfoBar
    'Diagram
        HeatMap "1" o-- "*" HeatMapLabel
        Hoverable "1" -- "1" HoverLabel : > shows upon being hovered

        DiagramViewHelper --> Diagram : > Wraps and decorates
        DiagramDirector --> DiagramBuilder
        DiagramDirector --> Diagram : <<creates>>
        DiagramComponentFactory --> DiagramComponent : <<creates>>
        DiagramComparer o-- IDiagramCompareStrategy
        DiagramData "1" *--> "1" DiagramDataFormatter
        Diagram *--> DiagramData
        Diagram *-- "*" DiagramComponent
'Package Relations
@enduml