@startuml Class_Diagram
'Style Settings
skinparam {
    Linetype ortho
    BackgroundColor #bababa
    Shadowing false
    Nodesep 60
    Ranksep 50
}
skinparam Arrow {
    Color #2e2e2e
    Thickness 1.5
}
skinparam CircledCharacter {
    Radius 8
    FontSize 10
}
skinparam class {
    BackgroundColor #d1d1d1
    BorderColor #2e2e2e
    BorderThickness 1.5
    HeaderBackgroundColor #a6a6a6
}
skinparam package {
    BackgroundColor #bcbfd6
    BorderThickness 1.8
}
skinparam Note {
    BackgroundColor #297547
    BorderColor #171a17
    FontColor #e8e8e8
}
!startsub DIAGRAM
'Class Diagram
'Class Definitions
    'Basic UI Components, extend/use Swing components
    package Components {
        'Swing
            together {
                class Container extends Component
                class JComponent extends Container {
                    .
                    .
                    --
                    .
                    .
                }
                class JFrame 
                class JFileChooser
                class JPanel extends JComponent
                class JButton extends JComponent
                class JLabel extends JComponent
                class JTextField extends JComponent
                class JTextPane extends JComponent
                class JComboBox extends JComponent
                class JTree extends JComponent
                class JScrollPane extends JComponent
                class JMenuBar extends JComponent
                class JCheckBox extends JComponent
            }
            'Listeners
                together {
                    interface EventListener
                    interface ComponentListener extends EventListener {
                        +componentHidden(ComponentEvent e)
                        +componentMoved(ComponentEvent e)
                        +componentResized(ComponentEvent e)
                        +componentShown(ComponentEvent e)
                    }
                    interface ActionListener extends EventListener {
                        +actionPerformed(ActionEvent e)
                    }
                    interface KeyListener extends EventListener {
                        +keyPressed(KeyEvent e)
                        +keyReleased(KeyEvent e)
                        +keyTyped(KeyEvent e)
                    }
                    interface TextListener extends EventListener{
                        +textValueChanged(TextEvent e)
                    }

                    interface ItemListener extends EventListener{
                        +itemStateChanged(ItemEvent e)
                    }

                    interface DocumentListener extends EventListener{
                        +changedUpdate(DocumentEvent e)
                        +insertUpdate(DocumentEvent e)
                        +removeUpdate(DocumentEvent e)
                    }
                }
        'Custom
            class Tree extends JTree
            class Button extends JButton
            class DropdownSelector extends JComboBox
            class InputBox extends JTextField
            class Checkbox extends JCheckBox
            class Label extends JLabel
            class ScrollPane extends JScrollPane
            class MenuBar extends JMenuBar
            class TextPane extends JTextPane

            'Frames/Panels
            together {
                enum ResizeMode {
                    ABSOLUTE_TOP_LEFT
                    ABSOLUTE_BOTTOM_RIGHT
                    RELATIVE
                }
                class Resizer {
                    +Resizer(ResizeMode t, ResizeModer r, ResizeMode b, ResizeMode l)
                    +resize(Component, int width, int height, int newWidth, int newHeight)
                }
                interface AutoResizing extends ComponentListener {
                    +setResizer(Component, Resizer)
                }

                class Panel extends JPanel implements AutoResizing {
                    -Map<Component, ComponentResizer>
                    +setResizer(Component, Resizer)
                }
                class Window implements AutoResizing {
                    -Map<Component, ComponentResizer>
                    +setResizer(Component, Resizer)
                }
                Window ..|> JFrame
                ResizeMode <-- Resizer
            }
    }
    
    'UI Composites
    package Composites {
        enum InfoBarID {
            VERSION
            SELECTED
            LASTACTION
            ERROR
        }
        class InfoBar extends Panel {
            -Map<InfoBarID,TextBox>
            +setText(InfoBarID, String)
        }
        InfoBarID <-- InfoBar : <<uses>>

        class MainWindow extends Window {
            -MenuBar mainMenu

            +MainWindow()
            + {static} void main(String[] args)
        }

        class SubWindowArea extends Panel{
            +addSubWindow(SubWindow)
            +removeSubWindow(SubWindow)
        }
        class SubWindow extends Panel {
            -MenuBar
            +SubWindow(Element)
            +setElement(Element)
        }
        SubWindow ..|> ModelUser
        abstract class ElementManipulator extends Panel {
            +setElement(Element)
        }
        ElementManipulator ..|> ModelUser
        class TextEditor implements ElementManipulator {
            -TextPane
            +TextEditor(Element)
        }
        class Visualizer implements ElementManipulator {
            -TextArea Info
            -MenuBar diagramOptions
            -MenuBar statisticsOptions
            +Visualizer(Element)
        }
        SubWindow *-- "1..[num subtypes]" ElementManipulator
        SubWindowArea *-- "0..3" SubWindow
        class Comparer implements ElementManipulator {
            +Comparer(Element e1, Element e2)
        }


        class Outliner extends Panel{
            -MenuBar
            -Tree
            -Model
            +Outliner(Model data)
            +setModel(Model data)
            +getSelectedElements: ArrayList<Element>
        }
        Outliner ..|> ModelUser

        class MergeDialog extends Window {
            Label prompt
            Label left
            Label right
            InputBox left
            InputBox right
            Button renameLeft
            Button renameRight
            Button keepLeft
            Button keepRight
            +MergeDialog()
            + ConflictData open(Cell eLeft, Cell eRight)
        }
        MergeDialog --* MainWindow
        class SettingsDialog extends Window {

        }
        SettingsDialog --* MainWindow
    }
'Diagrams
package Diagrams {
    interface IDiagram {
        +Collection<?> cloneData()
        +void refresh()
        +void update(Collection<?> data)
        +boolean addDiagramViewHelper(DiagramViewHelper dvh)
        +boolean removeDiagramViewHelper(IndicatorIdentifier id)
        +boolean showDiagramViewHelper(IndicatorIdentifier id)
        +boolean hideDiagramViewHelper(IndicatorIdentifier id)
        +DiagramComponent[] getNonValueDisplayDiagramComponentPrototypes()
        +DiagramValueDisplayComponent[] getDiagramValueDisplayComponentPrototypes()
    }
    interface IDiagramOverlayer {
        +IDiagram getDiagram(int index)
        +void setDiagram(int index, IDiagram diagram)
        +boolean addDiagram(IDiagram diagram)
        +boolean removeDiagram(int index)
        +IDiagram overlay(int[] indices)
        +IDiagram overlay(IDiagram[] diagrams)
    }
    package Diagram.Overlayer {
        class DiagramOverlayer implements IDiagramOverlayer {
            -Collection<IDiagram> diagrams
            -IDiagramOverlayStrategy overlayStrategy
            +DiagramOverlayer(IDiagram[] diagrams)
        }
        interface IDiagramOverlayStrategy {
            +IDiagram overlay()
        }
        class FunctionGraphOverlayStrategy implements IDiagramOverlayStrategy {
            -FunctionGraph[] functionGraphs
            +FunctionGraphOverlayStrategy(FunctionGraph[] functionGraphs)
            +IDiagram overlay()
        }
        class HistogramOverlayStrategy implements IDiagramOverlayStrategy {
            -Histogram histogram1
            -Histogram histogram2
            +HistogramOverlayStrategy(Histogram histogram1, Histogram histogram2)
            +IDiagram overlay()
        }
        class BarChartOverlayStrategy implements IDiagramOverlayStrategy {
            -BarChart barChart1
            -BarChart barChart2
            +BarChartOverlayStrategy(BarChart barChart1, BarChart barChart2)
            +IDiagram overlay()
        }
    }
    package Diagram.Components {
        class PositionInFrame {
            -Number xPos
            -Number yPos
            +PositionInFrame(Number xPos, Number yPos)
            +Number getXPos()
            +void setXPos(Number xPos)
            +Number getYPos()
            +void setYPos(Number yPos)
        }
        abstract class PositionInDiagram {
            -DiagramAxis[] axes
            -Number[] positionsInAxes
            +PositionInDiagram(DiagramAxis[] axes, Number[] coordinatesInAxes)
            +Number axisCoordinateToFrameCoordinate(int index)
            +PositionInFrame toPositionInFrame()
            #void setAxisCoordinate(int index, Number position)
            #void setAxisCoordinates(Number[] coordinates)
            #Number getAxisPos(int index)
        }
        class PositionIn2DDiagram extends PositionInDiagram{
            +PositionIn2DDiagram(DiagramAxis xAxis, Number xCoordinate, DiagramAxis yAxis, Number yCoordinate)
            +void setXCoordinate(Number xCoordinate)
            +void setYCoordinate(Number yCoordinate)
            +Number getXCoordinate()
            +Number getYCoordinate()
        }
        interface Hoverable {
            +default boolean isBeingHovered()
            +default void hoverAction()
            +default void refreshHoverLabelPosition()
            +default void showHoverLabel()
            +default void hideHoverLabel()
            +default void addHoverListener(JComponent component)
            +void addHoverListeners(JComponent[] components)
        }
        note right of Hoverable::hoverAction
            show label as default
            override if there is more
        end note
        abstract class DiagramComponent {
            -Color color
            #DiagramComponent(Color color)
            +{abstract} DiagramComponent clone()
            +void setColor(Color color)
            +Color getColor()
            +{abstract} void show()
            +{abstract} void hide()
        }
        abstract class DiagramValueDisplayComponent extends DiagramComponent implements Hoverable {
            -Number value
            #DiagramValueDisplayComponent(Color color, Number value)
            +void setValue(Number value)
            +Number getValue()
            +{abstract} void refreshValueRelevantAttributes()
        }
        abstract class DiagramBar extends DiagramValueDisplayComponent {
            -PositionIn2DDiagram bottomLeft
            -PositionIn2DDiagram topRight
            -Number borderThickness
            #DiagramBar(Color color, Number value, PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight, Number borderThickness)
            +Number getHeight()
            +Number getWidth()
            +void setBottomLeftInDiagram(Number x1, Number y1)
            +void setTopRightInDiagram(Number x2, Number y2)
            +PositionIn2DDiagram getBottomLeftInDiagram()
            +PositionIn2DDiagram getTopRightInDiagram()
        }
        abstract class DiagramAxis extends DiagramComponent {
            -Number min
            -Number max
            -int steps
            -boolean showValues
            -DiagramLine axisLine
            #DiagramAxis(DiagramLine axisLine, Number min, Number max, int steps)
            +void setMin(Number min)
            +Number getMin()
            +void setMax(Number max)
            +Number getMax()
            +void setSteps(int steps)
            +int getSteps()
            +void showValues()
            +void hideValues()
            'not good for flexibility and redundant, paintAxis is enough
            '#void paintComponent(Graphics g)
            'void show is already being implemented
            '+void paintAxis()
            +PositionInFrame valueToCoordinate(Number value)
            +Number CoordinateToValue(PositionInFrame coordinate)
            +void setLineByPos(Number minValXPos, Number minValYPos, Number maxValXPos, Number maxValYPos)
            +void setLineColor(Color color)
            +void setLineThickness(Number thickness)
            +Number getLineLength()
        }
        note right of DiagramAxis::paintComponent
            Override this method from JComponent,
            use paintAxis() method instead.

            paintAxis() initializes the parameter of
            paintComponent and calls paintComponent.
        end note
        note right of DiagramAxis::CoordinateToValue
            Throws an exception, if the coordinate
            is out of the range of the axis' line
            (determined by x1 and x2 or y1 and y2 of
            axisLine)
        end note
        abstract class DiagramLabel extends DiagramComponent {
            -String caption
            -PositionInFrame bottomLeft
            -PositionInFrame topRight
            -Number borderThickness
            #DiagramLabel(PositionInFrame bottomLeft, PositionInFrame topRight, Color color, String caption, Number borderThickness)
            +void setCaption(String caption)
            +String getCaption()
            +void setBottomLeftInFrame(Number x1, Number y1)
            +void setTopRightInFrame(Number x2, Number y2)
            +PositionInFrame getBottomLeftInFrame()
            +PositionInFrame getTopRightInFrame()
        }
        abstract class DiagramLine extends DiagramComponent {
            -PositionInFrame start
            -PositionInFrame end
            -Number thickness
            #DiagramLine(PositionInFrame start, PositionInFrame end, Color color, Number thickness)
            #Number calculateLength()
            +void setThickness(Number thickness)
            +void setStartInFrame(Number x1, Number y1)
            +void setEndInFrame(Number x2, Number y2)
            +PositionInFrame getStartInFrame()
            +PositionInFrame getEndInFrame()
            +Number getLength()
            +Number getThickness()
        }
        note top of DiagramLine
            Calculate length with Pythagoras'
            formula
        end note
        class SolidLine extends DiagramLine {
            -Line line
            #SolidLine(PositionInFrame start, PositionInFrame end, Color color, Number thickness)
        }
        abstract class DiagramValueLabel extends DiagramValueDisplayComponent {
            -PositionIn2DDiagram topRight
            -PositionIn2DDiagram bottomLeft
            -String caption
            -Number borderThickness
            #DiagramValueLabel(PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight, Color color, Number value, Number borderThickness)
            #void refreshCaption()
            #void setCaption(String caption)
            +String getCaption()
            +void setBottomLeftInDiagram(Number x1, Number y1)
            +void setTopRightInDiagram(Number x2, Number y2)
            +PositionIn2DDiagram getBottomLeftInDiagram()
            +PositionIn2DDiagram getTopRightInDiagram()
        }
        abstract class DiagramPoint extends DiagramValueDisplayComponent {
            -PositionIn2DDiagram position
            -Number size
            #DiagramPoint(PositionIn2DDiagram position, Color color, Number value, Number size)
            +void setSize(Number size)
            +Number getSize()
            +void setPositionInDiagram(Number x, Number y)
            +PositionIn2DDiagram getPositionInDiagram()
        }
        abstract class DiagramColorScale extends DiagramComponent {
            '-Color color = borderColor
            -PositionIn2DDiagram bottomLeft
            -PositionIn2DDiagram topRight
            -Number borderThickness
            -Number[] values
            -Color[] valueColors
            #DiagramColorScale(PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight, Color borderColor, Number[] values, Color[] valueColors, Number borderThickness)
            +Color valueToColor(Number value)
            +Number[] getValues()
            +Color[] getColors()
            +void setBottomLeftInFrame(Number x1, Number y1)
            +void setTopRightInFrame(Number x2, Number y2)
            +PositionInFrame getBottomLeftInFrame()
            +PositionInFrame getTopRightInFrame()
        }
        note right of DiagramColorScale::matchingsAsArray
            return new Object[]
            {getValues(), getColors()}
        end note
        class 2ColorScale extends DiagramColorScale {
            '-Color color = borderColor
            -WritableImage colorScale
            #2ColorScale(PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight, Color borderColor, Number minVal, Number maxVal, Color minValColor, Color maxValColor, Number borderThickness)
            +Color getMinValueColor()
            +Color getMaxValueColor()
            +void setMinValueColor(Color minValueColor)
            +void setMaxValueColor(Color maxValueColor)
            +Number getMinValue()
            +Number getMaxValue()
            +void setMinValue(Number minValue)
            +void setMaxValue(Number maxValue)
        }
        class ValueDisplayPoint extends DiagramPoint {
            -Point point
            #ValueDisplayPoint(Color color, Number value, Number size, PositionIn2DDiagram position)
        }
        class HistogramBar extends DiagramBar {
            -Label label
            #HistogramBar(Color color, Number value, PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight)
        }
        class BarChartBar extends DiagramBar {
            -Label label
            #BarChartBar(Color color, Number value, Number width, PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight)
        }
        class SolidAxis extends DiagramAxis {
            #SolidAxis(SolidLine axisLine, Number min, Number max, int steps)
        }
        class HeatMapLabel extends DiagramValueLabel {
            -Label label
            #HeatMapLabel(DiagramColorScale cs, Number value, PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight)
        }
        class DescriptionLabel extends DiagramLabel {
            -Label label
            #DescriptionLabel(Color color, String caption, PositionInFrame bottomLeft, PositionInFrame topRight)
        }
        /'Shows value that is being
        hovered over'/
        class HoverLabel {
            -String caption
            -Color color
            -PositionInFrame mousePosition
            -Number width
            -Number height
            -Label label
            -{static} HoverLabel hoverLabel
            -HoverLabel()
            +{static} HoverLabel getHoverLabel()
            +void show()
            +void hide()
            +void setWidth(Number width)
            +void setHeight(Number height)
            +Number getWidth()
            +Number getHeight()
            +void setXPos(Number xPos)
            +Number getXPos()
            +void setYPos(Number yPos)
            +Number getYPos()
            +void setCaption(String caption)
            +void setColor(Color color)
            +String getCaption()
            +Color getColor()
        }
        class DiagramComponentFactory {
            -{static} DiagramComponentFactory instance = new DiagramComponentFactory
            -DiagramComponentFactory()
            +{static} DiagramComponentFactory getDiagramComponentFactory()
            +DiagramPoint createPoint(Number value, PositionIn2DDiagram position, Number size)
            +DiagramValueLabel createValueLabel(Number value, PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight, Number borderThickness)
            +DiagramBar createBar(Number value, PositionIn2DDiagram bottomLeft, PositionIn2DDiagram topRight, Number borderThickness)
            +DiagramLabel createLabel(PositionInFrame bottomLeft, PositionInFrame topRight, Color color, String caption, Number borderThickness)
            +DiagramAxis createAxis(DiagramLine axisLine, Number min, Number max, int steps)
            +DiagramColorScale createColorScale(PositionInFrame bottomLeft, PositionInFrame topRight, Color borderColor, Number[] values, Color[] valueColors, Number borderThickness)
            +DiagramLine createLine(PositionInFrame start, PositionInFrame end, Color color, Number thickness)
        }
    }
    package Diagram.Data {
        class DiagramData {
            -Collection<?> data;
            -DiagramDataFormatter ddf;
            +DiagramData(Collection<?> data)
            +<T extends Collection<?>> T getData()
            +void setData(Collection<?> data)
            +void setFormat(DiagramDataFormatter ddf)
            +Object getFormattedData()
        }
        note right of DiagramData::getData
            Run ddf on data and return result.
            If ddf = null, return a deep copy.
        end note
        abstract class DiagramDataFormatter {
            +DiagramDataFormatter()
            +<T extends Collection<?>> Object format(T data)
        }
        class ArrayListDataFormatter extends DiagramDataFormatter {
            +ArrayListDataFormatter()
            +<T extends Collection<?>> Object format(T data)
        }
        class ArrayDataFormatter extends DiagramDataFormatter {
            +ArrayDataFormatter()
            +<E, T extends Collection<E>> Object format(T data)
        }
    }
    package Diagram.Type {
        abstract class Diagram implements IDiagram {
            -DiagramData data
            -DiagramAxis[] axes
            -DiagramValueDisplayComponent[] valueDisplayComponents
            -DiagramComponent[] nonValueDisplayComponents
            -EnumMap<IndicatorIdentifier, DiagramViewHelper> viewHelpers
            +Diagram(DiagramData data, DiagramAxis[] axes, DiagramValueDisplayComponent[] valueDisplayComponents, DiagramComponent[] nonValueDisplayComponents)
            +boolean addDiagramViewHelper(DiagramViewHelper dvh)
            +boolean removeDiagramViewHelper(IndicatorIdentifier id)
            +boolean showDiagramViewHelper(IndicatorIdentifier id)
            +boolean hideDiagramViewHelper(IndicatorIdentifier id)
        }
        class Histogram extends Diagram {
            +Histogram(DiagramData data, DiagramAxis[] axes, DiagramValueDisplayComponent[] valueDisplayComponents, DiagramComponent[] nonValueDisplayComponents)
        }
        class BarChart extends Diagram {
            +BarChart(DiagramData data, DiagramAxis[] axes, DiagramValueDisplayComponent[] valueDisplayComponents, DiagramComponent[] nonValueDisplayComponents)
        }
        class HeatMap extends Diagram {
            +HeatMap(DiagramData data, DiagramAxis[] axes, DiagramValueDisplayComponent[] valueDisplayComponents, DiagramComponent[] nonValueDisplayComponents)
        }
        class FunctionGraph extends Diagram {
            +FunctionGraph(DiagramData data, DiagramAxis[] axes, DiagramValueDisplayComponent[] valueDisplayComponents, DiagramComponent[] nonValueDisplayComponents)
        }
        note as Diagram1
            Diagrams' DiagramComponents are built via DiagramBuilders.
            Upon constructor call, the Diagram calls
            update(data) to modify the DiagramComponents stored.
        end note
        Histogram -- Diagram1
        BarChart -- Diagram1
        HeatMap -- Diagram1
        FunctionGraph -- Diagram1
    }
    package Diagram.Indicator {
        enum IndicatorIdentifier {
            MIN
            MAX
            AVG
            MED
            X_COORDINATE_INDICATOR
            Y_COORDINATE_INDICATOR
        }
        class DiagramViewHelperFactory {
            -{static} DiagramViewHelperFactory instance
            -DiagramViewHelperFactory()
            +{static} DiagramViewHelperFactory getInstance()
            +HelperComponentDisplayer createValueColorDisplayer(IDiagram diagram, IndicatorIdentifier id)
            +HelperLineDisplayer createCoordinateGridDisplayer(IDiagram diagram, DiagramAxis axis, IndicatorIdentifier id)
            +HelperLineDisplayer createValueLineDisplayer(IDiagram diagram, Number value, DiagramAxis axis, IndicatorIdentifier id)
        }
        abstract class DiagramViewHelper {
            -int layer
            -List<ViewHelperComponent> helperComponents
            -IndicatorIdentifier id
            -IDiagram diagram
            #DiagramViewHelper(IDiagram diagram, int layer, IndicatorIdentifier id)
            +int getLayerNumber()
            +void remove()
            +void show()
            +void hide()
            +void update()
            +boolean addViewHelperComponent(ViewHelperComponent vhc)
            +boolean removeViewHelperComponent(ViewHelperComponent vhc)
            +boolean clearViewHelperComponents()
            +IndicatorIdentifier getID()
        }
        DiagramViewHelperFactory -- DiagramViewHelper : > <<creates>>
        abstract class HelperLineDisplayer extends DiagramViewHelper {
            #HelperLineDisplayer(IDiagram diagram, int layer, IndicatorIdentifier id)
            #{abstract} void generateHelperComponents()
        }
        note left of DiagramViewHelper::layer
            Indicates how much in the front the DiagramViewHelper is.

            For example with JLayeredPane
        end note
        class ValueLineDisplayer extends HelperLineDisplayer {
            -DiagramAxis axis
            -Color color
            -Number thickness
            -Number value
            #ValueLineDisplayer(IDiagram diagram, DiagramAxis axis, Color color, Number thickness, Number value, IndicatorIdentifier id)
            -void createValueLine()
        }
        note bottom of ValueLineDisplayer
            Displays lines for statistics checked
            in the checkbox part
        end note
        abstract class HelperComponentDisplayer extends DiagramViewHelper {
            #HelperComponentDisplayer(IDiagram diagram, int layer, IndicatorIdentifier id)
        }
        class ValueFixColorDisplayer extends HelperComponentDisplayer {
            -TreeMap<Number, Color> mapping
            #ValueFixColorDisplayer(IDiagram diagram, TreeMap<Number, Color> mapping, IndicatorIdentifier id)
        }
        class ValueScaleColorDisplayer extends HelperComponentDisplayer {
            -DiagramColorScale colorScale
            #ValueScaleColorDisplayer(IDiagram diagram, DiagramColorScale colorScale, IndicatorIdentifier id)
        }
        note left of HelperComponentDisplayer
            Overshadows DiagramComponents with the ViewHelperComponents
            that are wanted to be seen by the user.

            Layer is set within the constructor.
        end note
        ValueColorDisplayers -- ValueScaleColorDisplayer
        ValueColorDisplayers -- ValueFixColorDisplayer
        class CoordinateIndicatorLineDisplayer extends HelperLineDisplayer {
            -DiagramAxis axis
            -Color color
            -Number thickness
            #CoordinateIndicatorLineDisplayer(IDiagram diagram, DiagramAxis axis, Color color, Number thickness, IndicatorIdentifier id)
            -void createCoordinateIndicatorLines()
        }
        class ViewHelperComponent {
            #ViewHelperComponent(DiagramComponent dc)
            +void show()
            +void hide()
        }
        note bottom of ViewHelperComponent
            Wraps DiagramComponents that the
            DiagramViewHelpers create and use
        end note
        note as ViewHelperComponentGeneration
            Call getDiagramValueDisplayComponentPrototypes() or
            getNonValueDisplayDiagramComponentPrototypes(),
            adjust the returned required elements, color them accordingly,
            wrap them with ViewHelperComponent object
            add them to helperComponents.
        end note
        DiagramViewHelper *--> ViewHelperComponent
        class CoordinateIndicatorLine extends DiagramLine {
            #CoordinateIndicatorLine(DiagramAxis axis, Color color, Number thickness)
        }
        class ValueLine extends DiagramLine {
            #ValueLine(DiagramAxis parallelAxis, Number value, Color color, Number thickness)
        }
        ValueLineDisplayer --> ValueLine : > <<creates>>
        CoordinateIndicatorLineDisplayer --> CoordinateIndicatorLine : > <<creates>>
    }
    note top of Diagram.Indicator
        Things that will be shown on diagrams
        that are not actually a part of them go here
    end note
    note as N1
        Strategy pattern:

        -IDiagramOverlayStrategy as abstract strategy
        -Its subclasses as concrete strategies
    end note
    note as N2
        Builder Pattern:

        -DiagramDirector as singleton director
        -DiagramBuilder class' subclasses as builders
    end note
    class DiagramDirector {
        -DiagramBuilder builder
        -DiagramData data
        -{static} DiagramDirector instance = new DiagramDirector
        -DiagramDirector()
        +{static} DiagramDirector getDiagramDirector()
        -void setBuilder()
        +void receiveDiagramData(Collection<?> data)
        -void setDiagramData(DiagramData data)
        +IDiagram build()
    }
    class SettingsProvider {
        -{static} SettingsProvider instance = new SettingsProvider
        -Settings s
        -SettingsProvider()
        +{static} SettingsProvider getInstance()
        +void changeSettings(Settings s)
        +Settings getSettings()
    }
    package Diagram.Builder {
        abstract class DiagramBuilder {
            -DiagramData data
            +DiagramBuilder(DiagramData data)
            #DiagramAxis buildAxes()
            #DiagramValueDisplayComponent[] buildValueDisplayComponents()
            #DiagramComponent[] buildDiagramSpecificComponent()
            +IDiagram buildDiagram()
        }
        class BarChartBuilder extends DiagramBuilder {
            +BarChartBuilder(DiagramData data)
        }
        class HistogramBuilder extends DiagramBuilder {
            +HistogramBuilder(DiagramData data)
        }
        class FunctionGraphBuilder extends DiagramBuilder {
            +FunctionGraphBuilder(DiagramData data)
        }
        class HeatMapBuilder extends DiagramBuilder {
            +HeatMapBuilder(DiagramData data)
        }
    }
}

'Class Relations
    'Ui
        AutoResizing --> Resizer
        Visualizer -> IDiagram

        MainWindow *-- "1"Outliner
        MainWindow *-- "1"SubWindowArea
        MainWindow *-- "1"InfoBar
    'Diagram
        HeatMap "1" o-- "*" HeatMapLabel
        Hoverable "1" -- "1" HoverLabel : > shows upon being hovered

        DiagramViewHelper --> Diagram : > Wraps and decorates
        DiagramDirector --> DiagramBuilder
        DiagramDirector --> Diagram : <<creates>>
        DiagramComponentFactory --> DiagramComponent : <<creates>>
        DiagramOverlayer o-- IDiagramOverlayStrategy
        DiagramData "1" *--> "1" DiagramDataFormatter
        Diagram *--> DiagramData
        Diagram *-- "*" DiagramComponent

'Cell Representation
package representation{

    class DataPanel {
        -Element element
        -Label label
        -String text
        +DataPanel(Element element)
        +setText(String text)
        
    }

    class CellPanel{
        -Label label
        -Button[] buttons
        -Checkbox[] checkboxes
        -Element cell
        -Element[] pins
        -BufferedImage image
        -CellImageGenerator cellGenerator
        +CellPanel(Element element)
        +switchToLibrary()
        +switchToPin(Element element)
        +switchToCell(Element element)
     
    }

    class LibraryPanel{
        -List<Button> buttons
        -List<Cell> cells
        -Library selectedLibrary
        +LibraryPanel(Element e)
        +switchToCell(Cell cell)
     
    }

    
    interface ICellImageGenerator{
        +buildCell(int inputPins, int outputPins)
    }

    class CellImageGenerator implements ICellImageGenerator{
        -BufferedImage pinIcon
        -BufferedImage cellIcon
        +CellImageGenerator()
        +buildCell(int inputPins, int outputPins): int
        
    }

    


    Visualizer *-- LibraryPanel
    Visualizer *-- DataPanel
    Visualizer *-- CellPanel
    LibraryPanel --> CellPanel
    CellPanel --> CellImageGenerator
    CellPanel --> Button
    CellPanel --> Checkbox
    LibraryPanel --> ScrollPane
}
!endsub
@enduml
