@startuml Hallo
skinparam linetype ortho
package model{    
    package element{
        abstract StatFactory {
            -Attribute attribute
            -Element element 
            -int min 
            -int max
            -int avg
            __
            Stat()
            calculateMin()
            calculateMax()
            calculateAvg()
        }
        class LibraryStat {
            __
            calculateMin()
            calculateMax()
            calculateAvg()
        }
        class CellStat {
            __
            calculateMin()
            calculateMax()
            calculateAvg()
        }
        class PinStat {
            __
            calculateMin()
            calculateMax()
            calculateAvg()
        }
        LibraryStat --|> StatFactory
        CellStat --|> StatFactory
        PinStat --|> StatFactory
        package attribute {
            abstract class Attribute{ 
                __
                # void calculate()
            }
            enum TimingSense {
            POSITIVE
            NEGATIVE
            NON
            }
            enum TimingType {
            COMBINATIONAL
            COMBRISE
            COMBFALL
            TSDISABLE
            TSENABLE
            TSDISABLERISE
            TSDISABLEFALL
            TSENABLERISE
            TSENABLEFALL
            }
            enum TimingGroup {
            CELLRISE
            CELLFALL
            FALLTRANSITION
            RISETRANSITION
            }
            enum PowerGroup {
            RISEPOWER
            FALLPOWER
            POWER
            }
            class Timing implements Attribute {
                - List<TimingSense> availableTimSen
                - List<TimingGroup> availableTimGr
                - List<TimingType> availableTimType
                -TimingSense timsense
                -TimingType timtype
                -TimingGroup timgroup
                -float[][] values
                -InputPin relatedPin
                __
                + void calculate()
            }
            class InputPower implements Attribute {
                -List<PowerGroup> availablePower
                -PowerGroup powgroup
                -float[] values
                __
                + void calculate()
            }
            class OutputPower implements Attribute {
                -List<PowerGroup> availablePower
                -PowerGroup powgroup 
                -float[][] values
                -InputPin relatedPin
                __
                + void calculate()
            }
            class Leakage implements Attribute {
                -String outputfunction
                -float value
                __
                + void calculate()
            }
        }
        enum Mode {
            MAX
            AVG
            MIN
            MEDIAN
        }
        abstract class Element{
            - String name
            __
            + {abstract} void calculate()
            + getName() : String
            + {static} compare(Element, Element) : int
        }
        
        class Library{
            - String path
            - Cell[] cells
            - float averageDefaultLeakage
            __
            + void calculate()
            + getPath() : String
            + void setPath(String)

        }
        class Cell{
            - Library parentLibrary
            - InputPin[] inPins
            - OutputPin[] outPins
            - Leakage[] leakages
            __
            + void calculateInPow()
            + void calculateOutPow()
            + void calculateTiming()
            + getName() : String
            + void setName(String)
            
        }
        abstract class Pin{
            - Cell parentCell
            - float capacitance
            __
            + getName() : String
            + void setName(String)
            
        }
        class InputPin{
            - InputPower[] inputPowers
            - float avgInputPower
            - float minInputPower
            - float maxInputPower
            - float medInputPower 
            __
            + void calculatePower()
        }
        class OutputPin{
            - OutputPower[] outputPowers
            - Timing[] timings
            - float avgOutputPower
            - float minOutputPower
            - float maxOutputPower
            - float medOutputPower 
            - float avgTiming 
            - float minTiming
            - float maxTiming
            - float medTiming
            __
            + void calculatePower()
            + void calculateTiming()
        }
        

        
    }

    
    package exceptions{
        interface Exception
        class InvalidComparisonException
        class InvalidFileFormatException
        class ExceedingFileSizeException
    }
    package commands{
        interface Command{
            __
            # void execute()
            # void undo()
        }
        class UndoHistory

        class ElementSearchAction implements Command{
            __
            + SearchAction(String, Element[])
            + execute() {Element[]???}
            + undo()
        }
        class EditorSearchAction implements Command{
            __
            + SearchAction(String, String)
            + execute() 
            + undo()
        }
        class FilterAction implements Command{
            Filter[] filters
            __
            + FilterAction(Element[], Filter[])
            + execute() {Element[]?}
            + undo()
        }
        class TextEdit implements Command{
            __
            + TextEdit (String, Element)
            + void execute()
            + void undo()
        }
        class UndoAction implements Command{
            __
            + UndoAction()
            + void execute()
            + coid undo()
        }
        class MergeAction implements Command{
            __
            + MergeAction(Library[])
            + void execute()
            + void undo ()
        }
        class DeleteAction implements Command{
            __
            + DeleteAction(Cell)
            + void execute()
            + void undo()
        }
        class RemoveAction implements Command{
            __
            + RemoveAction(Library)
            + void execute()
            + void undo()
        }
        class MoveAction implements Command{
            __
            + MoveAction(Element[], Library)
            + void execute()
            + void undo()
        }
        class RenameAction implements Command{
            __
            + RenameAction(Element, String)
            + void execute()
            + void undo()
        }
        enum Operation{
            LESS
            EQUAL
            BIGGER
        }
        class Filter{
            Attribute attribute
            Mode mode
            float value
            Operation operation
            __
            + Element[] filter(Element[])
        }
        
        class OpenFileAction implements Command {
            __
            + OpenFileAction()
            + void execute()
            + void undo()
        }
        OpenFileAction -- RemoveAction
        /'class SelectStatAction implements Command{
            __
            + SelectStatAction(String)
            + void execute()
            + void undo()
        }
        class SelectDropdownAction implements Command {
            + SelectDropdownAction(String)
            + void execute()
            + void undo()
        }
        class SelectCompareAction implements Command {
            + SelectCompareAction(Element)
            + void execute()
            + void undo()
        }
        '/
    }
    
    
    package parser{ 
        class Parser {
        - JsonParser parser
        - String json
        __
        + void parseLibrary(String)
        + void parseCell(String)
        + void parsePin(String)
        }
    }
    package compiler {
        interface Compiler{
        + compile(Element): String
        - compilePin(Pin): String
        - compileCell(Cell): String
        - compileLibrary(Library): String
        + saveFile(String): void
        }
        class CSVCompiler implements Compiler{
        __
        + compile(Element): String
        - compilePin(Pin): String
        - compileCell(Cell): String
        - compileLibrary(Library): String
        + saveFile(String): void
        }
        class LibertyCompiler implements Compiler{
        + compile(Element): String
        - compilePin(Pin): String
        - compileCell(Cell): String
        - compileLibrary(Library): String
        + saveFile(String): void
        }
    }
    
    
    
    package project {
        class Model {
        ArrayList<Library> libraries
        ArrayList<Library> selectedLibraries
        ArrayList<Library> openedLibraries
        ArrayList<Cell> selectedCells
        ArrayList<Cell> openedCells
        ArrayList<Pin> selectedPins
        ArrayList<Pin> openedPins
        __
        + notify()
        + getLibraries() : ArrayList<Library>
    
        }
        class FileChooser{
        + openFile(): File
        + void saveFile()
        }
        class Interpolation{
            __
            + void interpolate(float , PolynomialSplineFunction)
            + void bicubicInterpolate(float, float, BicubicInterpolatingFunction)
        }
    
        class Settings
        class Shortcuts{
        - Map<Keys(??), COMMAND> defaultCommands
        - Map<Keys(??), COMMAND> commands
        __
        + void setKey(Key, COMMAND)
        + void resetKeys()
        + COMMAND getCommand(Key)
        }
    }
    
}
Controller --> Model: call the necessary functions
Model --> Controller: notify Change
Model --> Interpolation
Model --> Settings
Model --> Shortcuts
Model --> FileChooser
Model --> Parser
Model --> SearchAction
MergeAction ..> Library: <<creates>>
Parser ..> Library: <<creates>>
Model --> MergeAction
Model --> FilterAction
Model --> UndoAction
Model --> RenameAction
Model --> DeleteAction
Model --> TextEdit
Model --> MoveAction
Model --> RemoveAction
Model --> LibertyCompiler
Model --> CSVCompiler
Model --> UndoHistory
Model --> CompareAction
Model --> OpenAction
Model --> CloseAction
Model --> OpenFileAction
Model --> SelectDropdownAction
Model --> SelectStatAction
TextEdit --> Parser 
Parser --> Library 
Parser --> Cell 
Parser --> Pin
SelectDropdownAction --> Attribute
SelectStatAction --> Attribute
OpenFileAction --> FileChooser
OpenFileAction --> Parser
UndoAction --> UndoHistory
Filter --* FilterAction
Element <|-- Library
Element <|-- Cell
Element <|-- Pin
Pin <|-- InputPin
Pin <|-- OutputPin
Operation -- Filter
TimingSense -- Timing
TimingType -- Timing
TimingGroup -- Timing
PowerGroup -- OutputPower
PowerGroup -- InputPower
Library *-- Cell
Cell *-- Pin
Exception --> InvalidComparisonException 
Exception --> InvalidFileFormatException
Exception --> ExceedingFileSizeException
@enduml
