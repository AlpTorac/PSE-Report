@startuml Hallo
skinparam linetype ortho
package model{
    package panelData{
        enum Mode{
            MAX
            MIN
            AVG
        }
        enum ElementType {
            LIBRARY
            CELL
            INPIN
            OUTPIN
        }
        enum AttributeType{
            OUTPOWER
            INPOWER
            DEFLEAKAGE
            LEAKAGE
            TIMING
            AREA
            CAPACITANCE
        }
        abstract class Panel{
            ElementType elementType
            String panelName
        }
        class TextEditor extends Panel{
            - Element element
            - String Content
            - String greyedBeforeContent
            - String greyedAfterContent
            __
            + search(String) : int
            + switchToElementView()
            + updateData()
        }
        interface GraphicImp{
            AttributeType attribute
            PowerGroup powgroup
            TimingGroup timgroup
            TimingType timtype
            TimingSense timsense
            Mode mode
            __
            {abstract} getData()
        }
        interface CompareView{
            __
            {abstract} void selectElement(Element)
            {abstract} void deselectElement(Element)
        }
        class CompareLibraryView extends Panel implements GraphicImp, CompareView{
            Element[] openedLibraries
            Library[] selectedLibraries
            __
            + void getData()
            + void selectElement(Element)
            + void deselectElement(Element)
        }
        class CompareCellPinView extends Panel implements GraphicImp, CompareView{
            Cell[] openedCells
            Element[] selectedElements
            __
            + void getData()
            + void selectElement(Element)
            + void deselectElement(Element)
        }
        class ElementView extends Panel implements GraphicImp{
            Element element
            __
            + void switchToTextEditor()
            + getData()
        }
    }
    package element{
        class Stat {
            -float min 
            -float max
            -float avg
            -float median
        }
        package attribute {
            abstract class Attribute{ 
                __
                # void calculate()
                + void scale(int)
            }
            enum TimingSense {
            POSITIVE
            NEGATIVE
            NON
            }
            enum TimingType {
            COMBINATIONAL
            COMBRISE
            COMBFALL
            TSDISABLE
            TSENABLE
            TSDISABLERISE
            TSDISABLEFALL
            TSENABLERISE
            TSENABLEFALL
            }
            enum TimingGroup {
            CELLRISE
            CELLFALL
            FALLTRANSITION
            RISETRANSITION
            }
            enum PowerGroup {
            RISEPOWER
            FALLPOWER
            POWER
            }
            class Timing implements Attribute {
                -TimingSense timsense
                -TimingType timtype
                -TimingGroup timgroup
                -float[][] values
                -InputPin relatedPin
                -Stat stats
                __
                + void calculate()
            }
            class InputPower implements Attribute {
                -PowerGroup powgroup
                -float[] values
                -Stat stats
                __
                + void calculate()
            }
            class OutputPower implements Attribute {
                -PowerGroup powgroup 
                -float[][] values
                -InputPin relatedPin
                -Stat stats
                __
                + void calculate()
            }
            class Leakage implements Attribute {
                float[] values
                -Stat stats
                __
                + void calculate()
            }
        }
        abstract class Element{
            - String name
            __
            + {abstract} void calculate()
            + getName() : String
            + {static} compare(Element, Element) : int
        }
        
        class Library{
            - List<TimingSense> availableTimSen
            - List<TimingGroup> availableTimGr
            - List<TimingType> availableTimType
            - List<PowerGroup> availableOutputPower
            - List<PowerGroup> availableInputPower
            - float[] index1
            - float[] index2
            - String path
            - String[] fileData
            - Cell[] cells
            - float averageDefaultLeakage
            - Map<Sense<Group<Type, Stat>>> timingStat
            - Map<Group, Stat> inPowerStat
            - Map<Group, Stat> outPowerStat
            __
            + void calculateLeakage()
            + void calculateInPow()
            + void calculateOutPow()
            + void calculateTiming()
            + getPath() : String
            + void setPath(String)
        }
        class Cell{
            - List<TimingSense> availableTimSen
            - List<TimingGroup> availableTimGr
            - List<TimingType> availableTimType
            - List<PowerGroup> availableOutputPower
            - List<PowerGroup> availableInputPower
            - Library parentLibrary
            - InputPin[] inPins
            - OutputPin[] outPins
            - Leakage[] leakages
            - Map<Sense<Group<Type, Stat>>> timingStat
            - Map<Group, Stat> inPowerStat
            - Map<Group, Stat> outPowerStat
            __
            + void calculateLeakage()
            + void calculateInPow()
            + void calculateOutPow()
            + void calculateTiming()
            + getName() : String
            + void setName(String)
            
        }
        abstract class Pin{
            - Cell parentCell
            - float capacitance
            - List<PowerGroup> availablePower
            __
            + getName() : String
            + void setName(String)
            
        }
        class InputPin{
            - InputPower[] inputPowers
            __
            + void calculatePower()
        }
        class OutputPin{
            - List<TimingSense> availableTimSen
            - List<TimingGroup> availableTimGr
            - List<TimingType> availableTimType
            - OutputPower[] outputPowers
            - Timing[] timings
            __
            + void calculatePower()
            + void calculateTiming()
        }
    }

    
    package exceptions{
        interface Exception
        class InvalidComparisonException
        class InvalidFileFormatException
        class ExceedingFileSizeException
    }
    package commands{
        interface Command{
            __
            # void execute()
            # void undo()
        }
        class ActionHistory{
            Command[] actions
            Command[] undoneActions
            Command PreviousAction
            __
            - void resetUndoneActions()
            + void addAction(Command)
            + getLatestActions() : Command
        }
        class CreateLibrary implements Command{
            __
            + CreateLibrary(String)
            + void execute()
            + void undo()
        }
        class Scale implements Command{
            __
            + Scale(Attribute, float)
            + void execute()
            + void undo()
        }
        class ElementSearchAction implements Command{
            __
            + SearchAction(String, Element[])
            + execute() {Element[]???}
            + undo()
        }
        class EditorSearchAction implements Command{
            __
            + SearchAction(String, String)
            + execute() 
            + undo()
        }
        class FilterAction implements Command{
            Filter[] filters
            __
            + FilterAction(Element[], Filter[])
            + execute() {Element[]?}
            + undo()
        }
        class TextEdit implements Command{
            __
            + TextEdit (String, Element)
            + void execute()
            + void undo()
        }
        class UndoAction implements Command{
            __
            + UndoAction()
            + void execute()
            + coid undo()
        }
        class MergeAction implements Command{
            __
            + MergeAction(Library[])
            + void execute()
            + void undo ()
        }
        class DeleteAction implements Command{
            __
            + DeleteAction(Cell)
            + void execute()
            + void undo()
        }
        class RemoveAction implements Command{
            __
            + RemoveAction(Library)
            + void execute()
            + void undo()
        }
        class MoveAction implements Command{
            __
            + MoveAction(Element[], Library)
            + void execute()
            + void undo()
        }
        class RenameAction implements Command{
            __
            + RenameAction(Element, String)
            + void execute()
            + void undo()
        }
        enum Operation{
            LESS
            EQUAL
            BIGGER
        }
        class Filter{
            Attribute attribute
            Mode mode
            float value
            Operation operation
            __
            + Element[] filter(Element[])
        }
        
        class OpenFileAction implements Command {
            __
            + OpenFileAction()
            + void execute()
            + void undo()
        }
        OpenFileAction -- RemoveAction
        /'class SelectStatAction implements Command{
            __
            + SelectStatAction(String)
            + void execute()
            + void undo()
        }
        class SelectDropdownAction implements Command {
            + SelectDropdownAction(String)
            + void execute()
            + void undo()
        }
        class SelectCompareAction implements Command {
            + SelectCompareAction(Element)
            + void execute()
            + void undo()
        }
        '/
    }
    
    
    package parser{ 
        class Parser {
        - JsonParser parser
        - String json
        __
        + void parseLibrary(String)
        + void parseCell(String)
        + void parsePin(String)
        }
    }
    package compiler {
        interface Compiler{
        + compile(Element): String
        - compilePin(Pin): String
        - compileCell(Cell): String
        - compileLibrary(Library): String
        + saveFile(String): void
        }
        class CSVCompiler implements Compiler{
        __
        + compile(Element): String
        - compilePin(Pin): String
        - compileCell(Cell): String
        - compileLibrary(Library): String
        + saveFile(String): void
        }
        class LibertyCompiler implements Compiler{
        + compile(Element): String
        - compilePin(Pin): String
        - compileCell(Cell): String
        - compileLibrary(Library): String
        + saveFile(String): void
        }
    }
    
    package project {
        class Model {
        ArrayList<Panel> panels
        ArrayList<Element> shownElements
        ArrayList<Element> greyedElements
        ArrayList<Element> filteredElements
        ArrayList<Element> searchedElements
        ArrayList<Library> libraries
        ArrayList<Element> selectedElements
        ArrayList<Element> openedInTextElements
        ArrayList<Element> greyedElements
        __
        + notify()
        + getLibraries() : ArrayList<Library>
    
        }
        class FileChooser{
        + openFile(): File
        + void saveFile()
        }
        class Interpolation{
            __
            + void interpolate(float , PolynomialSplineFunction)
            + void bicubicInterpolate(float, float, BicubicInterpolatingFunction)
        }
    
        class Settings
        class Shortcuts{
        - Map<Keys(??), COMMAND> defaultCommands
        - Map<Keys(??), COMMAND> commands
        __
        + void setKey(Key, COMMAND)
        + void resetKeys()
        + COMMAND getCommand(Key)
        }
    }
    
}
Controller --> Model: call the necessary functions
Model --> Controller: notify Change
Model --> Interpolation
Model --> Settings
Model --> Shortcuts
Model --> FileChooser
Model --> Parser
Model --> Panel
MergeAction ..> Library :  <<creates>> 
Parser ..> Library: <<creates>>
Model --> MergeAction
Model --> FilterAction
Model --> UndoAction
Model --> RenameAction
Model --> DeleteAction
Model --> TextEdit
Model --> MoveAction
Model --> RemoveAction
Model --> LibertyCompiler
Model --> CSVCompiler
Model --> ActionHistory
Model --> OpenFileAction
TextEdit --> Parser
Parser --> Library
Parser --> Cell
Parser --> Pin
/'SelectDropdownAction --> Attribute
SelectStatAction --> Attribute '/
OpenFileAction --> FileChooser
OpenFileAction --> Parser
UndoAction --> ActionHistory
Filter --* FilterAction
Element <|-- Library
Element <|-- Cell
Element <|-- Pin
Pin <|-- InputPin
Pin <|-- OutputPin
Operation -- Filter
TimingSense -- Timing
TimingType -- Timing
TimingGroup -- Timing
PowerGroup -- OutputPower
PowerGroup -- InputPower
Library *-- Cell
Cell *-- Pin
Exception --> InvalidComparisonException 
Exception --> InvalidFileFormatException
Exception --> ExceedingFileSizeException


/' alignment1 '/
/'
Controller -[hidden]-> project
commands -[hidden]> project
project -[hidden]> exceptions
parser -[hidden]> element
commands -[hidden]-> compiler
PowerGroup -[hidden]> Attribute
commands -[hidden]> compiler
'/


/' alignment2 '/
/'
Controller -[hidden]> project
project -[hidden]> compiler
compiler -[hidden]-> parser
parser -[hidden]> element
project-[hidden]> commands
'/


/' alignment3 '/

Controller -[hidden]-> model
project -[hidden]> compiler
compiler -[hidden]-> parser
parser -[hidden]> element
project-[hidden]> commands
@enduml
