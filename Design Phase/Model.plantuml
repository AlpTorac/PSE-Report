@startuml Model
skinparam linetype ortho
!startsub DIAGRAM
skinparam {
    Linetype ortho
    BackgroundColor #bababa
    Shadowing false
    Nodesep 60
    Ranksep 50
}
skinparam Arrow {
    Color #2e2e2e
    Thickness 1.5
}
skinparam CircledCharacter {
    Radius 8
    FontSize 10
}
skinparam class {
    BackgroundColor #d1d1d1
    BorderColor #2e2e2e
    BorderThickness 1.5
    HeaderBackgroundColor #a6a6a6
}
skinparam package {
    BackgroundColor #bcbfd6
    BorderThickness 1.8
}
skinparam Note {
    BackgroundColor #297547
    BorderColor #171a17
    FontColor #e8e8e8
}

/' package panelData{
    enum ElementType {
        LIBRARY
        CELL
        INPIN
        OUTPIN
    }
    enum AttributeType{
        OUTPOWER
        INPOWER
        DEFLEAKAGE
        LEAKAGE
        TIMING
        AREA
        CAPACITANCE
    }
    abstract class Panel{
        ElementType elementType
        String panelName
    }
    class TextEditor extends Panel{
        - Element element
        - String Content
        - String greyedBeforeContent
        - String greyedAfterContent
        __
        + search(String) : int
        + switchToElementView()
        + updateData()
    }
    interface GraphicImp{
        AttributeType attribute
        PowerGroup powgroup
        TimingGroup timgroup
        TimingType timtype
        TimingSense timsense
        Mode mode
        __
        {abstract} getData()
    }
    interface CompareView{
        __
        {abstract} void selectElement(Element)
        {abstract} void deselectElement(Element)
    }
    class CompareLibraryView extends Panel implements GraphicImp, CompareView{
        Element[] openedLibraries
        Library[] selectedLibraries
        __
        + void getData()
        + void selectElement(Element)
        + void deselectElement(Element)
    }
    class CompareCellPinView extends Panel implements GraphicImp, CompareView{
        Cell[] openedCells
        Element[] selectedElements
        __
        + void getData()
        + void selectElement(Element)
        + void deselectElement(Element)
    }
    class ElementView extends Panel implements GraphicImp{
        Element element
        __
        + void switchToTextEditor()
        + getData()
    }
}'/

package elements{
    class Stat {
        -float min 
        -float max
        -float avg
        -float median
        __
        + Stat(float,float,float,float)
        + getMin() : float
        + getMax() : float
        + getAvg() : float
        + getMed() : float
        + void setMin(float)
        + void setMax(float)
        + void setAvg(float)
        + void setMed(float)

    }
    package attributes {
        abstract class Attribute{ 
            # Stat stats
            __
            + Attribute()
            # void calculate()
            + void scale(float)
            + getStats(): Stats
        }
        abstract class InAttribute extends Attribute{ 
            # float[] index1
            # float[] values
            # InputPin parentInPin
            __
            + InAttribute()
            # void calculate()
            + void scale(float)
            + getParentInPin() : InputPin
            + void setParentInPin(InputPin)
            + getIndex1() : float[]
            + getValues() : float[]
            + void setIndex1(float[])
            + void setValues(float[])
        }
        abstract class OutAttribute extends Attribute{ 
            # float[] index1 
            # float[] index2
            # float[][] values
            # OutputPin parentOutPin
            # InputPin relatedPin
            __
            + OutAttribute()
            # void calculate()
            + void scale(float)
            + getParentOutPin() : OutputPin
            + void setParentOutPin(OutputPin)
            + getIndex1() : float[]
            + getIndex2() : float[]
            + getValues() : float[][]
            + getRelatedPin() : InputPin
            + void setIndex1(float[])
            + void setIndex2(float[])
            + void setValues(float[][])
            + void setRelatedPin(InputPin)
            + Attribute createComparedAttribute(Attribute)
        }
        enum TimingSense {
        POSITIVE
        NEGATIVE
        NON
        }
        enum TimingType {
        COMBINATIONAL
        COMBRISE
        COMBFALL
        TSDISABLE
        TSENABLE
        TSDISABLERISE
        TSDISABLEFALL
        TSENABLERISE
        TSENABLEFALL
        }
        enum TimingGroup {
        CELLRISE
        CELLFALL
        FALLTRANSITION
        RISETRANSITION
        }
        enum PowerGroup {
        RISEPOWER
        FALLPOWER
        POWER
        }
        class Timing extends OutAttribute {
            -TimingSense timsense
            -TimingType timtype
            -TimingGroup timgroup
            __
            + Timing(TimingSense, TimingType,
            TimingGroup, InputPin, float[][])
        }
        class InputPower extends InAttribute {
            -PowerGroup powgroup
            __
            + InputPower(PowerGroup, float[])
        }
        class OutputPower extends OutAttribute {
            -PowerGroup powgroup 
            __
            + OutputPower(PowerGroup, float[][])
        }
        class Leakage extends Attribute {
            - float[] values
            - Cell parentCell
            __
            + Leakage(float[])
            + getParentCell() : Cell
            + void setParentCell(Cell)
            + getValues() : float[]
            + setValues(float[])
        }
    }
    abstract class Element{
        # boolean filtered
        # boolean searched
        # String name
        __
        + Element()
        + getFiltered() : boolean
        + void setFiltered(boolean)
        + getSearched() : boolean
        + void setSearched(boolean)
        + {abstract} void calculate()
        + getName() : String
        + void setName(String)
        + compareTo(Element) : int
    }
    abstract class HigherElement extends Element{
        # ArrayList<TimingSense> availableTimSen
        # ArrayList<TimingGroup> availableTimGr
        # ArrayList<TimingType> availableTimType
        # ArrayList<PowerGroup> availableOutputPower
        # ArrayList<PowerGroup> availableInputPower
        # Map<Sense, Map<Group, Map<Type, Stat>>> timingStat
        # Map<Group, Stat> inPowerStat
        # Map<Group, Stat> outPowerStat
        # boolean hasShownElements
        # Stat leakage
        __
        + HigherElement()
        + getAvailableOutputPower() : ArrayList<PowerGroup>
        + void setAvailableOutputPower(ArrayList<PowerGroup>)
        + getAvailableInputPower() : ArrayList<PowerGroup>
        + void setAvailableInputPower(ArrayList<PowerGroup>)
        + getAvailableTimSen(): ArrayList<TimingSense>
        + void setAvailableTimSen(ArrayList<TimingSense>)
        + getAvailableTimGr(): ArrayList<TimingGroup>
        + void setAvailableTimGr(ArrayList<TimingGroup>)
        + getAvailableTimType(): ArrayList<TimingType>
        + void setAvailableTimType(ArrayList<TimingType>)
        + getTimingStat() : Map<Sense, Map<Group, Map<Type, Stat>>>
        + getInpowerStat() : Map<Group, Stat>
        + getOutPowerStat() : Map<Group, Stat>
        + getHasShownElements() : boolean
        + void setHasShownElements(boolean)
        + void calculateHasShownElements()
    }
    class Library extends HigherElement{
        - float[] index1
        - float[] index2
        - String path
        - String[] fileData
        - ArrayList<Cell> cells
        - Stat defaultLeakage
        __
        + Library(String, float[], float[], String, ArrayList<Cell>)
        + getCells() : ArrayList<Cell>
        + void setCells(ArrayList<Cell>)
        + void calculateLeakage()
        + void calculateInPow()
        + void calculateOutPow()
        + void calculateTiming()
        + void calculateDefaultLeakage()
        + getPath() : String
        + void setPath(String)
        + getFileData() : String[]
        + setFileData(String[])
        + getIndex1() : float[]
        + void setIndex1(float[])
        + getIndex2() : float[]
        + void setIndex2(float[])
        + getDefaultLeakage(): Stat
        + void saveLibrary()
        + void saveLibraryAs()
        + void saveAsCSV()
    }
    class Cell extends HigherElement{
        - float[] index1
        - float[] index2
        - Library parentLibrary
        - ArrayList<InputPin> inPins
        - ArrayList<OutputPin> outPins
        - Leakage[] leakages
        - float defaultLeakage
        __
        + Cell(String, float[], float[], Library, ArrayList<InputPin>, \n ArrayList<OutputPin>, Leakage[], float)
        + getIndex1() : float[]
        + void setIndex1(float[])
        + getIndex2() : float[]
        + void setIndex2(float[])
        + getInPins() : ArrayList<InputPin>
        + void setInPins(ArrayList<InputPin>)
        + getOutPins() : ArrayList<OutputPin>
        + void setOutPins(ArrayList<OutputPin>)
        + getParent() : Library
        + void setParent(Library)
        + getLeakage() : Leakage[]
        + void setLeakage(Leakage[])
        + getDefaultLeakage() : float
        + void setDefaultLeakage(float)
        + void calculateLeakage()
        + void calculateInPow()
        + void calculateOutPow()
        + void calculateTiming()
        + interpolate(float[], float[])
        + void saveAsCSV()
    }
    abstract class Pin extends Element{
        # Cell parentCell
        # float capacitance
        # ArrayList<PowerGroup> availablePower
        __
        + Pin()
        + getParent() : Cell
        + void setParent(Cell)
        + getAvailablePower() : ArrayList<PowerGroup>
        + setAvailablePower() : ArrayList<PowerGroup>
        + interpolate(float[], float[])
    }
    class InputPin{
        - ArrayList<InputPower> inputPowers
        __
        + InputPin(String, Cell, ArrayList<InputPower>)
        + void calculatePower()
        + getInputPowers(): ArrayList<InputPower>
        + void setInputPowers(ArrayList<InputPower>)
    }
    class OutputPin{
        - ArrayList<TimingSense> availableTimSen
        - ArrayList<TimingGroup> availableTimGr
        - ArrayList<TimingType> availableTimType
        - ArrayList<OutputPower> outputPowers
        - ArrayList<Timing> timings
        - String outPutFunction
        __
        + OutputPin(String, Cell, ArrayList<OutputPower>, ArrayList<Timing>)
        + getTimings(): ArrayList<Timing>
        + void setTimings(ArrayList<Timing>)
        + getOutputPowers(): ArrayList<OutputPower>
        + void setOutputPowers(ArrayList<OutputPower>)
        + getAvailableTimSen(): ArrayList<TimingSense>
        + setAvailableTimSen(ArrayList<TimingSense>)
        + getAvailableTimGr(): ArrayList<TimingGroup>
        + setAvailableTimGr(ArrayList<TimingGroup>)
        + getAvailableTimType(): ArrayList<TimingType>
        + setAvailableTimType(ArrayList<TimingType>)
        + getOutputFunction(): String
        + void setOutputFunction(String)
        + void calculatePower()
        + void calculateTiming()
        + void saveAsCSV()
    }
}


package exceptions{
    class InvalidComparisonException
    class InvalidFileFormatException
    class ExceedingFileSizeException
    class TooManySelectedException
    class TooManyPanelsOpenedException
    class InvalidArgumentException
    class InvalidNameException
}
package commands{
    interface Command{
        __
        # void execute()
        # void undo()
    }
    class CommandHistory{
        - Command[] commands
        - Command[] undoneCommands
        - int undoCount
        __
        + CommandHistory()
        + void setUndoCount(int)
        - void resetUndoneCommands()
        + void addCommand(Command)
        + void removeLatestCommand()
        + void resetCommands()
        + getLatestCommand() : Command
    }
    class CreateLibrary implements Command{
        - Library createdLibrary
        __
        + CreateLibrary(String)
        + void execute()
        + void undo()
    }
    class ScaleCommand implements Command{
        - Attribute attribute
        - float scale
        __
        + ScaleCommand(Attribute, float)
        + void execute()
        + void undo()
    }
    
    class RemoveFilterCommand implements Command{
        - Filter removedFilter
        __
        + RemoveFilterCommand(Filter)
        + execute()
        + undo()
    }
    class AddFilterCommand implements Command{
        - Filter addedFilter
        __
        + AddFilterCommand(Filter)
        + execute()
        + undo()
    }
    class TextEditCommand implements Command{
        - String oldContent
        - String newContent
        - Element element
        __
        + TextEditCommand (String, String, Element)
        + void execute()
        + void undo()
    }
    class UndoCommand implements Command{
        __
        + UndoCommand()
        + void execute()
        + coid undo()
    }
    class MergeCommand implements Command{
        - ArrayList<Library> mergedLibraries
        - Library productLibrary
        __
        + MergeCommand(String)
        + void execute()
        + void undo ()
    }
    class DeleteCommand implements Command{
        - ArrayList<Cell> deletedCells
        __
        + DeleteCommand(ArrayList<Cell>)
        + void execute()
        + void undo()
    }
    class RemoveCommand implements Command{
        - Library removedLibrary
        __
        + RemoveCommand(Library)
        + void execute()
        + void undo()
    }
    class PasteCommand implements Command{
        - ArrayList<Cell> pastedCells
        - ArrayList<Cell> deletedCells
        - HashMap<Cell, String> renamedCellsOldName
        - Library destinationLibrary
        __
        + PasteCommand(Library)
        + PasteCommand(Library, ArrayList<Cell>)
        + void execute()
        + void undo()
    }
    class MoveCommand implements Command{
        - HashMap<Cell, Library> initialPositions
        - ArrayList<Cell> deletedCells
        - HashMap<Cell, String> renamedCellsOldNames
        - Library destinationLibrary
        __
        + MoveCommand(ArrayList<Element>, Library)
        + void execute()
        + void undo()
    }
    class RenameCommand implements Command{
        - String oldName
        - String newName
        __
        + RenameCommand(Element, String)
        + void execute()
        + void undo()
    }
    class OpenFileCommand implements Command {
        - Library openedLibrary
        __
        + OpenFileCommand()
        + void execute()
        + void undo()
    }
    class NameConflictResolver{
        - HashMap<Cell, String> renamedCells
        - ArrayList<Cell> deletedCells
        - ArrayList<Cell> cells
        __
        + NameConflictResolver(ArrayList<Cell>)
    }
    class ConflictData{
        - String name
        - ResolutionMethod resolutionMethod
        __
        + ConflictData(ResolutionMethod, name)
        + getName() : String
        + getResolutionMethod() : ResolutionMethod
    }
    enum ResolutionMethod{
        KEEPLEFT
        KEEPRIGHT
        RENAMELEFT
        RENAMERIGHT
        CANCEL
    }
    ConflictData -- ResolutionMethod
    MoveCommand --> NameConflictResolver
    PasteCommand --> NameConflictResolver
    MergeCommand --> NameConflictResolver
    OpenFileCommand -- RemoveCommand
    /'class SelectStatCommand implements Command{
        __
        + SelectStatCommand(String)
        + void execute()
        + void undo()
    }
    class SelectDropdownCommand implements Command {
        + SelectDropdownCommand(String)
        + void execute()
        + void undo()
    }
    class SelectCompareCommand implements Command {
        + SelectCompareCommand(Element)
        + void execute()
        + void undo()
    }
    '/
}


package parsers { 
    class LibertyParser {
    - {static} final JsonParser PARSER
    __
    + LibertyParser()
    + {static} void parseLibrary(String)
    + {static} void parseCell(String)
    + {static} void parsePin(String)
    }
}
package compilers {
    class CSVCompiler{
    __
    + CSVCompiler()
    + {Static} compile(Pin): String
    + {Static} compile(Cell): String
    + {Static} compile(Library): String
    }
    class LibertyCompiler{
    + LibertyCompiler()
    + {Static} compile(Pin): String
    + {Static} compile(Cell): String
    + {Static} compile(Library): String
    }
}
package project {
    class Model {
        - {static} Model instance = new Model()
        - Project currentProject
        - Settings currentSettings
        - Shortcuts currentShortcuts
        __
        - Model()
        + {static} Model getInstance()
        + Project getCurrentProject()
        + void loadProject()
        + void saveProject()
        + Settings getCurrentSettings()
        + void saveSettings()
        + void resetSettings()
        + Shortcuts getCurrentShortcuts()
        + void saveShortcuts()
        + void resetShorcuts()
        + notify()
    }
    class Project {
    - ArrayList<Library> libraries
    - HashSet<Element> copiedElements
    - HashSet<Element> openedInTextElements
    - ArrayList<Filter> filters
    __
    + Project()
    + notify()
    + getLibraries() : ArrayList<Library>
    + getCopiedElements(): HashSet<Element>
    + getOpenedInTextElements(): HashSet<Element>
    + getFilters(): ArrayList<Filter>
    + void setLibraries(ArrayList<Library>) 
    + void setOpenedInTextElements(HashSet<Element>)
    + void setCopiedElements(HashSet<Element>)
    + void setFilters(ArrayList<Filter>)
    + void saveDefaultFilters()
    + void loadDefaultFilters()
    }
    class FileManager{
        __
        + {static} openFile(): File
        + {static} openFile(String): File
        + {static} void saveFile(String, String[], String)
        + {static} void saveFile(String, String, String, String)
    }
    class Interpolator{
        __
        + Interpolator()
        + {static} float[] interpolate(float[], float[], float[])
        + {static} float[][] bicubicInterpolate(float[], float[], float[][], float[], float[])
    }
enum LanguageEnum{
        ENGLISH
        DEUTSCH
        TURK
        SHQIP
        FRANCAIS
    }
    enum ColorThemeEnum{
        Theme1
        Theme2
        Theme3
        ANDSOON
    }
    class Settings{
        - Language currentLanguage
        - ColorTheme colorTheme
        - String fontType
        - int fontSize
        - int barCount
        - int undoCount
        - boolean editorOpenedFirst
        __
        + Settings()
        + void setLanguage(LanguageEnum)
        + void setColorTheme(ColorThemeEnum)
        + void setFontType(String)
        + void setFontSize(int)
        + void setBarCount(int)
        + void setUndoCount(int)
        + void setEditorOpenedFirst(boolean)
        + getLanguage() : LanguageEnum
        + getColorTheme() : ColorThemeEnum
        + getFontType() : String
        + getFontSize() : int
        + getBarCount() : int
        + getUndoCount() : int
        + getEditorOpenedFirst(): boolean
        - void notify()
    }
    LanguageEnum -- Settings
    ColorThemeEnum -- Settings
    class ColorTheme{
        - HashMap<ColorEnum, int> colors
        __
        + ColorTheme()
        + getColor(ColorEnum): int[]
    }
    enum ColorEnum{
        System_BG
        System_Shade
        Hover_Highlight
        Text_Default
        Liberty_Window_BG
        Section
        SubSection
        Input_Field_BG
        Interactable_BG
        Scroll_Bar_Handle
        Text_Active
        Text_Selected
    }
    ColorEnum -- ColorTheme
    class Language{
        - HashMap<TextComponent, String> map
        __
        + getTextComponent(TextComponent): String
    }
    enum TextComponent{
        PROGRAM_DESCRIPTION
        LIBRARY
        CELL
        PIN
        INDEX
        FILE
        EDIT
        INFO
        EDITOR
        VIEWER
        ...
        ABOUT_TEXT
    }
    Settings *-- ColorTheme
    Settings *-- Language
    class Shortcuts{
    - HashMap<char, Event> actions
    __
    + void setKey(char, Event)
    + void removeKey(char)
    + ArrayList<char> getKeys()
    + Event getAction(char)
    }
    enum Operation{
        LESS
        EQUAL
        BIGGER
    }
    enum Mode{
        MAX
        MIN
        AVG
        MED
    }
    class Filter{
        - Attribute attribute
        - Mode mode
        - float value
        - Operation operation
        - boolean status
        __
        + Filter(Attribute, Mode, 
        float, Operation)
        + void filter()
        + setStatus(boolean)
        + getStatus(): boolean
    }
}
Project --> Compiler
Project --> CSVCompiler
Model --> Settings
Model --> Shortcuts
Model --> FileManager
Filter --> FileManager
MergeCommand ..> Library
Project --* Model
TextEditCommand --> LibertyParser
LibertyParser ..> Library
LibertyParser ..> Cell
LibertyParser ..> Pin
/'SelectDropdownCommand --> Attribute
SelectStatCommand --> Attribute '/
OpenFileCommand --> FileManager
OpenFileCommand --> LibertyParser
UndoCommand --> CommandHistory
Filter <-- AddFilterCommand
Filter <-- RemoveFilterCommand
Pin <|-- InputPin
Pin <|-- OutputPin
Operation -- Filter
Mode -- Filter
TimingSense -- Timing
TimingType -- Timing
TimingGroup -- Timing
PowerGroup -- OutputPower
PowerGroup -- InputPower
Library *-- Cell
Cell *-- Pin
Project --> LibertyCompiler
LibertyParser ..> Attribute
!endsub

/' project -[hidden]> compiler
compiler -[hidden]-> parser
parser -[hidden]> element
project-[hidden]> commands '/
OutputPower -[hidden]> InputPower
InputPower -[hidden]-> PowerGroup
Timing -[hidden]-> TimingType
Timing -[hidden]-> TimingSense
Timing -[hidden]-> TimingGroup
elements -[hidden]> exceptions
InvalidComparisonException -[hidden]-> InvalidFileFormatException
InvalidFileFormatException -[hidden]-> ExceedingFileSizeException




@enduml
