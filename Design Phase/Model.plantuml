@startuml Hallo
skinparam linetype ortho
!startsub DIAGRAM

/' package panelData{
    enum ElementType {
        LIBRARY
        CELL
        INPIN
        OUTPIN
    }
    enum AttributeType{
        OUTPOWER
        INPOWER
        DEFLEAKAGE
        LEAKAGE
        TIMING
        AREA
        CAPACITANCE
    }
    abstract class Panel{
        ElementType elementType
        String panelName
    }
    class TextEditor extends Panel{
        - Element element
        - String Content
        - String greyedBeforeContent
        - String greyedAfterContent
        __
        + search(String) : int
        + switchToElementView()
        + updateData()
    }
    interface GraphicImp{
        AttributeType attribute
        PowerGroup powgroup
        TimingGroup timgroup
        TimingType timtype
        TimingSense timsense
        Mode mode
        __
        {abstract} getData()
    }
    interface CompareView{
        __
        {abstract} void selectElement(Element)
        {abstract} void deselectElement(Element)
    }
    class CompareLibraryView extends Panel implements GraphicImp, CompareView{
        Element[] openedLibraries
        Library[] selectedLibraries
        __
        + void getData()
        + void selectElement(Element)
        + void deselectElement(Element)
    }
    class CompareCellPinView extends Panel implements GraphicImp, CompareView{
        Cell[] openedCells
        Element[] selectedElements
        __
        + void getData()
        + void selectElement(Element)
        + void deselectElement(Element)
    }
    class ElementView extends Panel implements GraphicImp{
        Element element
        __
        + void switchToTextEditor()
        + getData()
    }
}'/

package elements{
    class Stat {
        -float min 
        -float max
        -float avg
        -float median
        __
        + Stat(float,float,float,float)
        + getMin() : float
        + getMax() : float
        + getAvg() : float
        + getMed() : float
        + void setMin(float)
        + void setMax(float)
        + void setAvg(float)
        + void setMed(float)

    }
    package attributes {
        abstract class Attribute{ 
            # Stat stats
            __
            + void calculate()
            + void scale(int)
            + getStats(): Stats
        }
        abstract class InAttribute extends Attribute{ 
            # float[] index1
            # float[] values
            __
            # void calculate()
            + void scale(int)
            + getIndex1() : float[]
            + getValues() : float[][]
            + void setIndex1(float[])
            + void setValues(float[][])
        }
        abstract class OutAttribute extends Attribute{ 
            # float[] index1 
            # float[] index2
            # float[][] values
            # InputPin relatedPin
            __
            # void calculate()
            + void scale(int)
            + getIndex1() : float[]
            + getIndex2() : float[]
            + getValues() : float[][]
            + getRelatedPin() : InputPin
            + void setIndex1(float[])
            + void setIndex2(float[])
            + void setValues(float[][])
            + void setRelatedPin(InputPin)
        }
        enum TimingSense {
        POSITIVE
        NEGATIVE
        NON
        }
        enum TimingType {
        COMBINATIONAL
        COMBRISE
        COMBFALL
        TSDISABLE
        TSENABLE
        TSDISABLERISE
        TSDISABLEFALL
        TSENABLERISE
        TSENABLEFALL
        }
        enum TimingGroup {
        CELLRISE
        CELLFALL
        FALLTRANSITION
        RISETRANSITION
        }
        enum PowerGroup {
        RISEPOWER
        FALLPOWER
        POWER
        }
        class Timing implements OutAttribute {
            -TimingSense timsense
            -TimingType timtype
            -TimingGroup timgroup
            __
            + Timing(TimingSense, TimingType,
            TimingGroup, InputPin, float[][])
        }
        class InputPower implements InAttribute {
            -PowerGroup powgroup
            __
            + InputPower(PowerGroup, float[])
        }
        class OutputPower implements OutAttribute {
            -PowerGroup powgroup 
            __
            + OutputPower(PowerGroup, float[][])
        }
        class Leakage implements Attribute {
            - float[] values
            __
            + Leakage(float[])
        }
    }
    abstract class Element{
        # boolean filtered
        # boolean searched
        # String name
        __
        + getFiltered() : boolean
        + void setFiltered(boolean)
        + getSearched() : boolean
        + void setSearched(boolean)
        + {abstract} void calculate()
        + getName() : String
        + void setName(String)
        + {static} compare(Element, Element) : int
    }
    abstract class HigherElement extends Element{
        - ArrayList<TimingSense> availableTimSen
        - ArrayList<TimingGroup> availableTimGr
        - ArrayList<TimingType> availableTimType
        - ArrayList<PowerGroup> availableOutputPower
        - ArrayList<PowerGroup> availableInputPower
        - MapMap<Sense, Map<Group, Map<Type, Stat>>> timingStat
        - Map<Group, Stat> inPowerStat
        - Map<Group, Stat> outPowerStat
        - boolean hasShownElements
        - Stat leakage
        __
        + getAvailableOutputPower() : ArrayList<PowerGroup>
        + getAvailableInputPower() : ArrayList<PowerGroup>
        + getAvailableTimSen(): ArrayList<TimingSense>
        + getAvailableTimGr(): ArrayList<TimingGroup>
        + getAvailableTimType(): ArrayList<TimingType>
        + getTimingStat() : Map<Sense, Map<Group, Map<Type, Stat>>>
        + getInpowerStat() : Map<Group, Stat>
        + getOutPowerStat() : Map<Group, Stat>
        + getHasShownElements() : boolean
        + void setHasShownElements(boolean)
        + void calculateHasShownElements()
    }
    class Library extends HigherElement{
        - float[] index1
        - float[] index2
        - String path
        - String[] fileData
        - ArrayList<Cell> cells
        - Stat defaultLeakage
        __
        + getCells() : ArrayList<Cell>
        + void setCells(ArrayList<Cell>)
        + void calculateLeakage()
        + void calculateInPow()
        + void calculateOutPow()
        + void calculateTiming()
        + void calculateDefaultLeakage()
        + getPath() : String
        + void setPath(String)
        + getIndex1() : float[]
        + getIndex2() : float[]
        + getDefaultLeakage(): Stat
    }
    class Cell extends HigherElement{
        - Library parentLibrary
        - InputPin[] inPins
        - OutputPin[] outPins
        - Leakage[] leakages
        - float defaultLeakage
        __
        + getInPins() : InputPin[]
        + getOutPins() : OutputPin[]
        + getParent() : Library
        + getLeakage() : Leakage[]
        + setLeakage(Leakage[])
        + getDefaultLeakage() : float
        + void setDefaultLeakage(float)
        + void calculateLeakage()
        + void calculateInPow()
        + void calculateOutPow()
        + void calculateTiming()
    }
    abstract class Pin extends Element{
        # Cell parentCell
        # float capacitance
        # ArrayList<PowerGroup> availablePower
        __
        + getName() : String
        + void setName(String)
        + getParent() : Cell
        + getAvailablePower() : ArrayList<PowerGroup>
    }
    class InputPin{
        - ArrayList<InputPower> inputPowers
        __
        + void calculatePower()
        + getInputPowers(): ArrayList<InputPower>
        + setInputPowers(ArrayList<InputPower>)
    }
    class OutputPin{
        - ArrayList<TimingSense> availableTimSen
        - ArrayList<TimingGroup> availableTimGr
        - ArrayList<TimingType> availableTimType
        - ArrayList<OutputPower> outputPowers
        - ArrayList<Timing> timings
        - String outPutFunction
        __
        + getTimings(): ArrayList<Timing>
        + getOutputPowers(): ArrayList<OutputPower>
        + void setTiming(ArrayList<Timing>)
        + void setOutputPower(ArrayList<OutputPower>)
        + getAvailableTimSen(): ArrayList<TimingSense>
        + getAvailableTimGr(): ArrayList<TimingGroup>
        + getAvailableTimType(): ArrayList<TimingType>
        + void calculatePower()
        + void calculateTiming()
    }
}


package exceptions{
    interface Exception
    class InvalidComparisonException
    class InvalidFileFormatException
    class ExceedingFileSizeException
    class TooManySelectedException
    class TooManyPanelsOpenedException
    class InvalidArgumentException
    class InvalidNameException
}
package commands{
    interface Command{
        __
        # void execute()
        # void undo()
    }
    class ActionHistory{
        - Command[] actions
        - Command[] undoneActions
        - int undoNumber
        __
        + void setUndoNumber(int)
        - void resetUndoneActions()
        + void addAction(Command)
        + void resetActions()
        + getLatestAction() : Command
    }
    class CreateLibrary implements Command{
        - Library createdLibrary
        __
        + CreateLibrary(String)
        + void execute()
        + void undo()
    }
    class ScaleAction implements Command{
        - Attribute attribute
        - float scale
        __
        + ScaleAction(Attribute, float)
        + void execute()
        + void undo()
    }
    
    class RemoveFilterAction implements Command{
        - Filter removedFilter
        __
        + RemoveFilterAction(Filter)
        + execute()
        + undo()
    }
    class AddFilterAction implements Command{
        - Filter addedFilter
        __
        + AddFilterAction(Filter)
        + execute()
        + undo()
    }
    class TextEditAction implements Command{
        - String oldContent
        - String newContent
        - Element element
        __
        + TextEditAction (String, String, Element)
        + void execute()
        + void undo()
    }
    class UndoAction implements Command{
        __
        + UndoAction()
        + void execute()
        + coid undo()
    }
    class MergeAction implements Command{
        - Library[] mergedLibraries
        - Library productLibrary
        __
        + MergeAction(Library[])
        + void execute()
        + void undo ()
    }
    class DeleteAction implements Command{
        - Cell deletedCell
        __
        + DeleteAction(Cell)
        + void execute()
        + void undo()
    }
    class RemoveAction implements Command{
        - Library removedLibrary
        __
        + RemoveAction(Library)
        + void execute()
        + void undo()
    }
    class MoveAction implements Command{
        - Map<Element, Library> initialPositions
        - Libary destinationLibrary
        __
        + MoveAction(Element[], Library)
        + void execute()
        + void undo()
    }
    class RenameAction implements Command{
        - String oldName
        - String newName
        __
        + RenameAction(Element, String)
        + void execute()
        + void undo()
    }
    class SelectAction implements Command{
        - HashSet<Element> selectedElements
        - HashSet<Element> deselectedElements
        __
        + SelectAction(Element)
        + void execute()
        + void undo()
    }
    class OpenFileAction implements Command {
        - Library openedLibrary
        __
        + OpenFileAction()
        + void execute()
        + void undo()
    }
    OpenFileAction -- RemoveAction
    /'class SelectStatAction implements Command{
        __
        + SelectStatAction(String)
        + void execute()
        + void undo()
    }
    class SelectDropdownAction implements Command {
        + SelectDropdownAction(String)
        + void execute()
        + void undo()
    }
    class SelectCompareAction implements Command {
        + SelectCompareAction(Element)
        + void execute()
        + void undo()
    }
    '/
}


package parsers { 
    class LibertyParser {
    - JsonParser parser
    - String json
    __
    + LibertyParser()
    + {static} void parseLibrary(String)
    + {static} void parseCell(String)
    + {static} void parsePin(String)
    }
}
package compilers {
    interface Compiler{
    __
    + {Static} compile(Pin): String
    + {Static} compile(Cell): String
    + {Static} compile(Library): String
    }
    class CSVCompiler implements Compiler{
    __
    + CSVCompiler()
    + {Static} compile(Pin): String
    + {Static} compile(Cell): String
    + {Static} compile(Library): String
    }
    class LibertyCompiler implements Compiler{
    + LibertyCompiler()
    + {Static} compile(Pin): String
    + {Static} compile(Cell): String
    + {Static} compile(Library): String
    }
}

package project {
    class Model {
        - {static} Model instance = new Model()
        - Project currentProject
        - Settings currentSettings
        - Shortcuts currentShortcuts
        __
        - Model()
        + {static} Model getInstance()
        + Project getCurrentProject()
        + void loadProject()
        + void saveProject()
        + Settings getCurrentSettings()
        + void saveSettings()
        + void resetSettings()
        + Shortcuts getCurrentShortcuts()
        + void saveShortcuts()
        + void resetShorcuts()
        + notify()
    }
    class Project {
    - ArrayList<Library> libraries
    - HashSet<Element> selectedElements
    - HashSet<Element> openedInTextElements
    __
    + Project()
    + notify()
    + getLibraries() : ArrayList<Library>
    + getSelectedElements(): HashSet<Element>
    + getOpenedInTextElements(): HashSet<Element>
    + setLibraries() : ArrayList<Library> 
    + setSelectedElements(): HashSet<Element>
    + setOpenedInTextElements(): HashSet<Element>
    + {static} void saveLibrary(Library)
    + {static} void saveLibraryAs(Library)
    + {static} void saveAsCSV(Element)
    }
    class FileManager{
        + openFile(): File
        + openFile(String): File
        + void saveFile(String, String[])
        + void saveFile(String, String, String)
    }
    class Interpolator{
        __
        + Interpolator()
        + {static} float[] interpolate(float[], float[], float[])
        + {static} float[][] bicubicInterpolate(float[], float[], float[][], float[], float[])
    }
enum LanguageEnum{
        ENGLISH
        DEUTSCH
        TURK
        SHQIP
        FRANCAIS
    }
    enum ColorThemeEnum{
        Theme1
        Theme2
        Theme3
        ANDSOON
    }
    class Settings{
        - Language currentlanguage
        - ColorTheme colors
        - String FontType
        - int FontSize
        - int barCount
        - int undoCount
        - boolean editorOpenedFirst
        __
        + Settings()
        + void setLanguage(LanguageEnum)
        + void setColorTheme(ColorThemeEnum)
        + void setFontType(String)
        + void setFontSize(int)
        + void setBarCount(int)
        + void setUndoCount(int)
        + void setEditorOpenedFirst(boolean)
        + getLanguage() : LanguageEnum
        + getColorTheme() : ColorThemeEnum
        + getFontType() : String
        + getFontSize() : int
        + getBarCount() : int
        + getUndoCount() : int
        + getEditorOpenedFirst(): boolean
        - void notify()
    }
    LanguageEnum -- Settings
    ColorThemeEnum -- Settings
    class ColorTheme{
        - int[] colors
        __
        + getColors(): int[]
    }
    class Language{
        - String appname
        - String[] elements
        - String[] menus
        - String[] methods
        - String[] attributes
        - String[] text
        __
        + getAppname(): String
        + getElements(): String[]
        + getMenus(): String[]
        + getMethods(): String[]
        + getAttributes(): String[]
        + gettext(): String[]
    }
    Settings *-- ColorTheme
    Settings *-- Language
    class Shortcuts{
    - HashMap<char, COMMAND> commands
    __
    + void setKey(char, COMMAND)
    + void removeKey(char)
    + ArrayList<char> getKeys()
    + COMMAND getAction(char)
    }
    enum Operation{
        LESS
        EQUAL
        BIGGER
    }
    enum Mode{
        MAX
        MIN
        AVG
        MED
    }
    class Filter{
        - {static} ArrayList<Filter> filters
        - Attribute attribute
        - Mode mode
        - float value
        - Operation operation
        __
        + Filter(Attribute, Mode, float,
        Operation)
        + {static} void filter()
        + {static} void saveDefaultFilters()
        + {static} void loadDefaultFilters()
    }
}
Project --> Compiler
Project --> CSVCompiler
Model --> Settings
Model --> Shortcuts
Model --> FileManager
Filter --> FileManager
MergeAction ..> Library 
Parser ..> Library
Project --* Model
TextEditAction --> Parser
Parser --> Library
Parser --> Cell
Parser --> Pin
/'SelectDropdownAction --> Attribute
SelectStatAction --> Attribute '/
OpenFileAction --> FileManager
OpenFileAction --> Parser
UndoAction --> ActionHistory
Filter <-- AddFilterAction
Filter <-- RemoveFilterAction
Pin <|-- InputPin
Pin <|-- OutputPin
Operation -- Filter
Mode -- Filter
TimingSense -- Timing
TimingType -- Timing
TimingGroup -- Timing
PowerGroup -- OutputPower
PowerGroup -- InputPower
Library *-- Cell
Cell *-- Pin
Exception <|.. InvalidComparisonException 
Exception <|.. InvalidFileFormatException
Exception <|.. ExceedingFileSizeException
Exception <|.. TooManyPanelsOpenedException
Exception <|.. TooManySelectedException
Exception <|.. InvalidNameException
Exception <|.. InvalidArgumentException
!endsub

/' project -[hidden]> compiler
compiler -[hidden]-> parser
parser -[hidden]> element
project-[hidden]> commands '/
OutputPower -[hidden]> InputPower
InputPower -[hidden]-> PowerGroup
Timing -[hidden]-> TimingType
Timing -[hidden]-> TimingSense
Timing -[hidden]-> TimingGroup
@enduml
