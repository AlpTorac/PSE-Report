package gelf.view.diagrams;

import java.awt.Color;
import java.awt.Font;
import java.util.EnumMap;
import java.util.Map;

public class SettingsProvider {
	
	private Map<SettingsName, Settings> currentSettings;
	private static SettingsProvider instance;
	
	private SettingsProvider() {
		this.currentSettings = new EnumMap<SettingsName, Settings>(SettingsName.class);
		this.initialiseSettings();
	}
	
	private void initialiseSettings() {
		this.currentSettings.put(SettingsName.AXIS_SETTINGS, new AxisSettings());
		this.currentSettings.put(SettingsName.BAR_CHART_SETTINGS, new BarChartSettings());
		this.currentSettings.put(SettingsName.DIAGRAM_COLOR_SCALE, new DiagramColorScaleSettings());
		this.currentSettings.put(SettingsName.DIAGRAM_LABEL_SETTINGS, new DiagramLabelSettings());
		this.currentSettings.put(SettingsName.FUNCTION_GRAPH_SETTINGS, new FunctionGraphSettings());
		this.currentSettings.put(SettingsName.HISTOGRAM_SETTINGS, new HistogramSettings());
		this.currentSettings.put(SettingsName.HOVER_LABEL_SETTINGS, new HoverLabelSettings());
	}
	
	public SettingsProvider getInstance() {
		if (instance == null) {
			instance = new SettingsProvider();
		}
		return instance;
	}
	
	private enum SettingsName {
		AXIS_SETTINGS("Axis"),
		BAR_CHART_SETTINGS("BarChart"),
		HISTOGRAM_SETTINGS("Histogram"),
		FUNCTION_GRAPH_SETTINGS("FunctionGraph"),
		DIAGRAM_LABEL_SETTINGS("DiagramLabel"),
		HOVER_LABEL_SETTINGS("HoverLabel"),
		DIAGRAM_COLOR_SCALE("DiagramColorLabel"),
		UNDEFINED("Undefined");
		
		@SuppressWarnings("unused")
		public final String ID;
		
		private SettingsName(String ID) {
			this.ID = ID;
		}
	}
	
	protected abstract class Settings {
		private final SettingsName ID;

		private Settings(SettingsName ID) {
			this.ID = ID;
		}
		
		public SettingsName getID() {
			return this.ID;
		}
	}
	
	private class AxisSettings extends Settings {
		private int axisThickness = 1;
		private Color axisColor = Color.BLACK;
		private int axisValueFontSize = 10;
		private String axisFontType = "TimesRoman";
		private int fontStyle = Font.PLAIN;
		private boolean showAxisValues = true;
		private int additionalSpaceForAxisValues = 5;
		
		/**
		 * The horizontal space left between a vertical axis and the edges for displaying values.
		 */
		private int xSpaceForAxisValues = axisValueFontSize + additionalSpaceForAxisValues;
		/**
		 * The vertical space left between a horizontal axis and the edges for displaying values.
		 */
		private int ySpaceForAxisValues = axisValueFontSize + additionalSpaceForAxisValues;
		
		private AxisSettings() {
			super(SettingsName.AXIS_SETTINGS);
		}

		public int getAxisThickness() {
			return axisThickness;
		}

		public void setAxisThickness(int axisThickness) {
			this.axisThickness = axisThickness;
		}

		public Color getAxisColor() {
			return axisColor;
		}

		public void setAxisColor(Color axisColor) {
			this.axisColor = axisColor;
		}

		public int getAxisValueFontSize() {
			return axisValueFontSize;
		}

		public void setAxisValueFontSize(int axisValueFontSize) {
			this.axisValueFontSize = axisValueFontSize;
		}

		public String getAxisFontType() {
			return axisFontType;
		}

		public void setAxisFontType(String axisFontType) {
			this.axisFontType = axisFontType;
		}

		public int getFontStyle() {
			return fontStyle;
		}

		public void setFontStyle(int fontStyle) {
			this.fontStyle = fontStyle;
		}

		public boolean isShowAxisValues() {
			return showAxisValues;
		}

		public void setShowAxisValues(boolean showAxisValues) {
			this.showAxisValues = showAxisValues;
		}

		public int getAdditionalSpaceForAxisValues() {
			return additionalSpaceForAxisValues;
		}

		public void setAdditionalSpaceForAxisValues(int additionalSpaceForAxisValues) {
			this.additionalSpaceForAxisValues = additionalSpaceForAxisValues;
		}

		public int getxSpaceForAxisValues() {
			return xSpaceForAxisValues;
		}

		public void setxSpaceForAxisValues(int xSpaceForAxisValues) {
			this.xSpaceForAxisValues = xSpaceForAxisValues;
		}

		public int getySpaceForAxisValues() {
			return ySpaceForAxisValues;
		}

		public void setySpaceForAxisValues(int ySpaceForAxisValues) {
			this.ySpaceForAxisValues = ySpaceForAxisValues;
		}
	}
	
	private class BarChartSettings extends Settings {
		private Color barColor = Color.RED;
		private Color barComparisonColor = Color.GREEN;
		private Color barBorderColor = Color.BLACK;
		private int barBorderThickness = 1;
		
		private BarChartSettings() {
			super(SettingsName.BAR_CHART_SETTINGS);
		}

		public Color getBarColor() {
			return barColor;
		}

		public void setBarColor(Color barColor) {
			this.barColor = barColor;
		}

		public Color getBarComparisonColor() {
			return barComparisonColor;
		}

		public void setBarComparisonColor(Color barComparisonColor) {
			this.barComparisonColor = barComparisonColor;
		}

		public Color getBarBorderColor() {
			return barBorderColor;
		}

		public void setBarBorderColor(Color barBorderColor) {
			this.barBorderColor = barBorderColor;
		}

		public int getBarBorderThickness() {
			return barBorderThickness;
		}

		public void setBarBorderThickness(int barBorderThickness) {
			this.barBorderThickness = barBorderThickness;
		}
	}
	
	private class HistogramSettings extends Settings {
		private Color barColor = Color.RED;
		private Color barComparisonColor = Color.GREEN;
		private Color barBorderColor = Color.BLACK;
		private int barBorderThickness = 1;
		
		private HistogramSettings() {
			super(SettingsName.HISTOGRAM_SETTINGS);
		}

		public Color getBarColor() {
			return barColor;
		}

		public void setBarColor(Color barColor) {
			this.barColor = barColor;
		}

		public Color getBarComparisonColor() {
			return barComparisonColor;
		}

		public void setBarComparisonColor(Color barComparisonColor) {
			this.barComparisonColor = barComparisonColor;
		}

		public Color getBarBorderColor() {
			return barBorderColor;
		}

		public void setBarBorderColor(Color barBorderColor) {
			this.barBorderColor = barBorderColor;
		}

		public int getBarBorderThickness() {
			return barBorderThickness;
		}

		public void setBarBorderThickness(int barBorderThickness) {
			this.barBorderThickness = barBorderThickness;
		}
	}
	
	private class DiagramLabelSettings extends Settings {
		private Color diagramLabelBorderColor = Color.BLACK;
		private Color diagramLabelForegroundColor = Color.BLACK;
		private int diagramLabelFontSize = 10;
		private String diagramLabelFontType = "TimesRoman";
		
		private DiagramLabelSettings() {
			super(SettingsName.DIAGRAM_LABEL_SETTINGS);
		}

		public Color getDiagramLabelBorderColor() {
			return diagramLabelBorderColor;
		}

		public void setDiagramLabelBorderColor(Color diagramLabelBorderColor) {
			this.diagramLabelBorderColor = diagramLabelBorderColor;
		}

		public Color getDiagramLabelForegroundColor() {
			return diagramLabelForegroundColor;
		}

		public void setDiagramLabelForegroundColor(Color diagramLabelForegroundColor) {
			this.diagramLabelForegroundColor = diagramLabelForegroundColor;
		}

		public int getDiagramLabelFontSize() {
			return diagramLabelFontSize;
		}

		public void setDiagramLabelFontSize(int diagramLabelFontSize) {
			this.diagramLabelFontSize = diagramLabelFontSize;
		}

		public String getDiagramLabelFontType() {
			return diagramLabelFontType;
		}

		public void setDiagramLabelFontType(String diagramLabelFontType) {
			this.diagramLabelFontType = diagramLabelFontType;
		}
	}
	
	private class HoverLabelSettings extends Settings {
		private Color hoverLabelBorderColor = Color.BLACK;
		private Color hoverLabelForegroundColor = Color.BLACK;
		private int hoverLabelFontSize = 10;
		private String hoverLabelFontType = "TimesRoman";
		
		private HoverLabelSettings() {
			super(SettingsName.HOVER_LABEL_SETTINGS);
		}

		public Color getHoverLabelBorderColor() {
			return hoverLabelBorderColor;
		}

		public void setHoverLabelBorderColor(Color hoverLabelBorderColor) {
			this.hoverLabelBorderColor = hoverLabelBorderColor;
		}

		public Color getHoverLabelForegroundColor() {
			return hoverLabelForegroundColor;
		}

		public void setHoverLabelForegroundColor(Color hoverLabelForegroundColor) {
			this.hoverLabelForegroundColor = hoverLabelForegroundColor;
		}

		public int getHoverLabelFontSize() {
			return hoverLabelFontSize;
		}

		public void setHoverLabelFontSize(int hoverLabelFontSize) {
			this.hoverLabelFontSize = hoverLabelFontSize;
		}

		public String getHoverLabelFontType() {
			return hoverLabelFontType;
		}

		public void setHoverLabelFontType(String hoverLabelFontType) {
			this.hoverLabelFontType = hoverLabelFontType;
		}
	}
	
	private class DiagramColorScaleSettings extends Settings {
		private Color[] diagramColorScaleColors = new Color[] {Color.RED, Color.BLUE};
		
		private DiagramColorScaleSettings() {
			super(SettingsName.DIAGRAM_COLOR_SCALE);
		}

		public Color[] getDiagramColorScaleColors() {
			return diagramColorScaleColors;
		}

		public void setDiagramColorScaleColors(Color[] diagramColorScaleColors) {
			this.diagramColorScaleColors = diagramColorScaleColors;
		}
	}
	
	private class FunctionGraphSettings extends Settings {
		private int functionGraphPointSize;
		
		private FunctionGraphSettings() {
			super(SettingsName.FUNCTION_GRAPH_SETTINGS);
		}
		
		public int getFunctionGraphPointSize() {
			return functionGraphPointSize;
		}
		public void setFunctionGraphPointSize(int functionGraphPointSize) {
			this.functionGraphPointSize = functionGraphPointSize;
		}
	}
}
