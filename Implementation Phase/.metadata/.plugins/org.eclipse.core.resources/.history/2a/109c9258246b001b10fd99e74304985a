package gelf.view.diagrams;

import java.awt.Color;
import java.awt.Font;
import java.util.EnumMap;
import java.util.Map;

public class SettingsProvider {
	
	private Map<SettingsName, Settings> currentSettings;
	private static SettingsProvider instance;
	
	private SettingsProvider() {
		this.currentSettings = new EnumMap<SettingsName, Settings>(SettingsName.class);
		
	}
	
	private void initialiseSettings() {
		
	}
	
	public SettingsProvider getInstance() {
		if (instance == null) {
			instance = new SettingsProvider();
		}
		return instance;
	}
	
	private enum SettingsName {
		AXIS_SETTINGS("Axis"),
		BAR_CHART_SETTINGS("BarChart"),
		HISTOGRAM_SETTINGS("Histogram"),
		FUNCTION_GRAPH_SETTINGS("FunctionGraph"),
		DIAGRAM_LABEL_SETTINGS("DiagramLabel"),
		HOVER_LABEL_SETTINGS("HoverLabel"),
		DIAGRAM_COLOR_SCALE("DiagramColorLabel"),
		UNDEFINED("Undefined");
		
		public final String ID;
		
		private SettingsName(String ID) {
			this.ID = ID;
		}
	}
	
	protected abstract class Settings {
		private SettingsName ID;

		private Settings(SettingsName ID) {
			this.ID = ID;
		}
		
		public SettingsName getID() {
			return this.ID;
		}
	}
	
	protected class AxisSettings extends Settings {
		private int axisThickness = 1;
		private Color axisColor = Color.BLACK;
		private int axisValueFontSize = 10;
		private String axisFontType = "TimesRoman";
		private int fontStyle = Font.PLAIN;
		private boolean showAxisValues = true;
		private int additionalSpaceForAxisValues = 5;
		
		/**
		 * The horizontal space left between a vertical axis and the edges for displaying values.
		 */
		private int xSpaceForAxisValues = axisValueFontSize + additionalSpaceForAxisValues;
		/**
		 * The vertical space left between a horizontal axis and the edges for displaying values.
		 */
		private int ySpaceForAxisValues = axisValueFontSize + additionalSpaceForAxisValues;
		
		private AxisSettings() {
			super(SettingsName.AXIS_SETTINGS);
		}
	}
	
	protected class BarChartSettings extends Settings {
		private Color barColor;
		private Color barComparisonColor;
		private Color barBorderColor;
		private int barBorderThickness;
		private int barWidth;
		
		private BarChartSettings() {
			super(SettingsName.BAR_CHART_SETTINGS);
		}
	}
	
	protected class HistogramSettings extends Settings {
		private Color barColor;
		private Color barComparisonColor;
		private Color barBorderColor;
		private int barBorderThickness;
		
		private HistogramSettings() {
			super(SettingsName.HISTOGRAM_SETTINGS);
		}
	}
	
	protected class DiagramLabelSettings extends Settings {
		private Color diagramLabelBorderColor;
		private Color diagramLabelForegroundColor;
		private int diagramLabelFontSize;
		private String diagramLabelFontType;
		
		private DiagramLabelSettings() {
			super(SettingsName.DIAGRAM_LABEL_SETTINGS);
		}
	}
	
	protected class HoverLabelSettings extends Settings {
		private Color hoverLabelBorderColor;
		private Color hoverLabelForegroundColor;
		private int hoverLabelFontSize;
		private String hoverLabelFontType;
		
		private HoverLabelSettings() {
			super(SettingsName.HOVER_LABEL_SETTINGS);
		}
	}
	
	protected class DiagramColorScaleSettings extends Settings {
		private Color[] diagramColorScaleColors;
		
		private DiagramColorScaleSettings() {
			super(SettingsName.DIAGRAM_COLOR_SCALE);
		}
	}
	
	protected class FunctionGraphSettings extends Settings {
		private int functionGraphPointSize;
		
		private FunctionGraphSettings() {
			super(SettingsName.FUNCTION_GRAPH_SETTINGS);
		}
	}
}
